[["index.html", "R Reference Book Introduction", " R Reference Book Reto Zihlmann 2023-07-15 Introduction This book contains a constantly growing collection of useful R knowledge. R is a free software environment for statistical computing and graphics. The book is written in RMarkdown with bookdown. This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. "],["table-of-content.html", "Table of content", " Table of content R Language Objects Vectors Functions Environments Settings Miscellaneous R Basics Data import/export Data handling Regular expressions R Programming Basics Performance Functional programming R from the shell R Output Base graphics ggplot Interactive plots Text output R Statistics Basics Regression ANOVA Multivariate Time series Computational statistics R Workflow Reproducible Research R Studio R Markdown Bookdown Reference management Git version control Packages Misc Cheat sheets References "],["objects.html", "Chapter 1 Objects 1.1 Inspect object 1.2 Classifications 1.3 Basic Objects", " Chapter 1 Objects To understand computations in R, two slogans are helpful: Everything that exists is an object. Everything that happens is a function call. — John Chambers 1.1 Inspect object str(): struction of object, get unsystematic overview typeof(): “low-level” type of an object mode(): storage mode of an object Determines how an object is stored class(): “high-level” class of object Determines what method is applied when passed to generic functions typeof() and mode() are almost the same (at the same level) except that they use different names typeof() mode() integer, double numeric special, builtin function symbol name language (, call class() is on a complete different level and determines what method is applied when passed to generic functions. Some classes are explicitly stated as an attribute, others are implicitly given by the mode For historical reasons (back compatibility with S / S+), another low-level inspector function is storage.mode(). expr object typeof storage.mode mode class 1 1 double double numeric numeric 1:2 1 2 integer integer numeric integer pi 3.141593 double double numeric numeric 1i 0+1i complex complex complex complex NA NA logical logical logical logical c(‘A’, ‘b’, ‘:::’) A b ::: character character character character mean function (x, … closure function function function c .Primitive(“c”) builtin function function function function .Primitive(“func special function function function as.name(‘Mä’) Mä symbol symbol name name quote(x) x symbol symbol name name quote({) { symbol symbol name name expression(1+1) expression(1 + 1 expression expression expression expression call(‘round’,10) round(10) language language call call quote(sin(x)) sin(x) language language call call y ~ x+t y ~ x + t language language call formula formals(lm) qr TRUE FAL pairlist pairlist pairlist pairlist formals(lm)[[1]] symbol symbol name name NULL NULL NULL NULL NULL NULL 1.2 Classifications Objects can be ordered in a hierarchical structure Vector Atomic vector Matrix Array List Data frame Function Primitive Closure Environment Symbol Call Expression Forumla … Some objects are building blocks for other objects Symbols can be combined to calls. Calls can be combined to expressions 1.3 Basic Objects 1.3.1 Vectors, functions and environments Vectors will be covered in chapter 2, functions in chapter 3 and environments in chapter 4 1.3.2 Symbols A way to refer to R objects by name Constituent of calls Type: symbol Class: name x &lt;- call(&quot;sin&quot;, 1:3) typeof(x[[1]]) ## [1] &quot;symbol&quot; 1.3.3 Calls An unevaluated expression which consists of the named function applied to the given arguments Class: call Type: language Evaluate a call with eval() Action R command Create call() or quote() Check is.call() Coerce as.call() x &lt;- call(&quot;sin&quot;, 1:3) y &lt;- quote(sin(1:3)) eval(x) ## [1] 0.8414710 0.9092974 0.1411200 1.3.4 Expression Lists of calls expression() returns its arguments as a vector of unevaluated expressions. quote() returns its argument as an unevaluated expression. eval() evaluates an expression in a certain environment eval(quote(mean(c(1:3)))) ## [1] 2 Evaluate strings as variable names a &lt;- 1.34 get(&quot;a&quot;) # returns object ## [1] 1.34 eval(parse(text = &quot;a&quot;)) # eval: evaluates an expression, parse: convert string to expression ## [1] 1.34 1.3.5 Formulas Helppage, Tutorial Formulas contain a ~ and at least one predictor variable Formulas are unevaluated expressions attributes class formula environment The additional environment attribute is what separates them from expressions makes sure that terms in formula can later be associated with vectors of values. form1 &lt;- ~x class(form1) ## [1] &quot;formula&quot; attributes(form1) ## $class ## [1] &quot;formula&quot; ## ## $.Environment ## &lt;environment: R_GlobalEnv&gt; length(form1) ## [1] 2 form2 &lt;- y ~ x + I(x^2) + x:z class(form2) ## [1] &quot;formula&quot; length(form2) ## [1] 3 form2[[1]] ## `~` form2[[2]] ## y form2[[3]] ## x + I(x^2) + x:z Action R command Create formula() or just type it (automatically detected based on ~) Check plyr::is.formula() Coerce as.formula() Functions to inspect/change formulas terms() all.vars() update() Formula syntax is a way to specify linear models. y ~ model: response y is modeled by linear predictor model consists of terms separated by + Single terms consist of variable/factor names separated by : Such a term is interpreted as the interaction of all the variables and factors appearing in the term. This notation is originally referred to as Wilkinson-style notation and was later extended e.g. for lme4 Symbol Example Meaning ~ Y ~ X Y is response variable, X is predictor + + X Add X to linear predictor - - X Remove X from linear predictor : X:Z Interaction between X and Z * X*Y X + Y + X:Y ^ (X+Y+Z)^3 All terms and all interaction up to tree way interaction | X|Z conditioning: X given Z I I(X*Z) as is (escape formula meaning of *), product of X and Z log() log(X) log(X), not necessary to escape because log() has no special formula interpretation 1 X - 1 Intercept: remove intercept which is automatically included / X/Z X + X:Z (Z as nested factor in X) %in% Z %in% X X:Z (Z as nested factor in X, internally gets transformed to :, usually use upper notation because main X effect should also be included) poly() poly(x,2) Orthogonal polynomials up to degree 2 Error() Error(X) Additional error term determined by factor X . Y ~ . Two interpretations. 1) Model fitting: all columns not otherwise in the formula, 2) update.formula(): what was previously in this part of the formula Special cases in lme4: (1 | batch/cask) is equivalent to (1 | batch) + (1 | batch:cask) Figure 1.1: lme4 formula syntax. From Bates et al. 2015 Check if formula constructs your expected model with model.matrix() y ~ (x1 + x2)^3 does not make sense. 3-Way interactions are only possible between at least 3 variables. Update formulas with the update() function fit2 &lt;- update(fit, .~. + X2) Formula examples: Yield ~ Genotype*Nitrogen + Error(Block) # Effect and interaction of Genotype and Nitrogen # Block effect as random effect y ~ .^2 # all remaining columns with all possible 2 ways interactions 1.3.6 Not understand yet parse() all.equal() Why? x &lt;- call(&quot;sin&quot;, 1:10) y &lt;- quote(sin(1:10)) identical(x,y) ## [1] FALSE "],["vec.html", "Chapter 2 Vectors 2.1 Type 2.2 Length 2.3 Attributes 2.4 Factors 2.5 Matrices/Arrays 2.6 Data frames 2.7 Special values", " Chapter 2 Vectors Almost all data in R is stored in vectors. Most famous vector types are listed below Vectors Description Atomic vector 1 dimensional collection, homogeneous, flat List 1 dimensional collection, heterogeneous, recursive Matrix Atomic vector 2 dimensions Array Atomic vector n dimensions Data frame List containing atomic vectors of same length homogeneous: only contains one data type flat: no nested structure (vector containing another vector) recursive: nesting is possible All vectores can be described using 4 properties Property Explanation Example x &lt;- 1:3 Content Information stored in the vector 1 2 3 Type Data type (numeric, list, …) integer Length Lenght of the vector 3 Attributes Additional properties of the vector NULL 2.1 Type 2.1.1 Atomic Within atomic vectors there are 6 vector types Logical (TRUE) Integer (1L) Double (3.14) Character (\"Hello\") Complex (2+5i) Raw (48 65 6c 6c 6f bits) By default numbers are of type double. If you really want integers put L at end e.g. typeof(1) vs typeof(1L). Action R command Create Create a vector with c(). The output of function c() is of a certain type. The type is determined by the following hierarchy (so called coercian = “Zwang”) NULL &lt; raw &lt; logical &lt; integer &lt; double &lt; complex &lt; character &lt; list &lt; expression Check typeof() or with is.character(), is.double(), is.integer(), is.logical() and more generally is.atomic() Coerce as.character(), as.double(), as.integer() or as.logical() 2.1.2 List Action R command Create Creat a list with list() or connect existing lists with c() Check is.list() Coerce as.list() Unlist Make atomic vector out of list: unlist() Subsetting lists [ extracts a sub-list, the result will always be a list [[ extracts a single component from a list $ is shorthand for extracting named elements of a list 2.1.3 Check type of vector typeof() is_*() lgl int dbl chr list is_logical() x is_integer() x is_double() x is_numeric() x x is_character() x is_atomic() x x x x is_list() x is_vector() x x x x x 2.2 Length length() or generalization for higher dimensional vectors (nrow(),ncol(),dim()) 2.3 Attributes named list metadata about objects access all with attributes() set several attributes with structure() access, set and change single attribute with attr() x &lt;- 1:3; names(x) &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) x ## a b c ## 1 2 3 attributes(x) ## $names ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; Set and change them with All at once structure() Specific ones names() / unname() dim() class() x &lt;- structure(1:10, names=letters[1:10], foo=&quot;bar&quot;, class=&quot;myclass&quot;) x ## a b c d e f g h i j ## 1 2 3 4 5 6 7 8 9 10 ## attr(,&quot;foo&quot;) ## [1] &quot;bar&quot; ## attr(,&quot;class&quot;) ## [1] &quot;myclass&quot; Three attributes are not lost when object is modified Names: names of entries in vector Dimensions: define matrix and arrays Class: (e.g. numeric, data.frame, function, … implement S3 object system) 2.4 Factors Factors Atomic vectors Type: integer Class: factor Additional attribute: levels x &lt;- as.factor(1:4) attributes(x) ## $levels ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ## ## $class ## [1] &quot;factor&quot; Action R command Create factor() Check is.factor() Coerce as.factor() Access set and rename levels with levels() 2.5 Matrices/Arrays Adding dimensions to an atomic vector automatically changes it to an Matrix/Array Class: Matrix/Array (but not shown in attributes) Additional attribute: dim Action R command Create matrix(), array() Check is.matrix(), is.array() Coerce as.matrix(), as.array() Access, set and change dimensions with dim() Higher dimensional generalization of length(), names() and c() 1 dim 2 dim n dim length() nrow(), ncol() dim() names() rownames(), colnames() dimnames() c() rbind(), cbind() abind() 2.6 Data frames Type: list Class: data.frame Additional attribute: names, row.names and class Action R command Create data.frame() Check is.data.frame() Coerce as.data.frame() Data frame columns can also contain lists and matrices, but it is better to use lists for this purpose. 2.7 Special values 0 Inf NA NaN is.finite() x is.infinite() x is.na() x x is.nan() x 2.7.1 Missing values Different types of NA NA_real_ (double) NA_integer_ NA_character_ "],["fun.html", "Chapter 3 Functions 3.1 Types 3.2 Function components 3.3 Arguments 3.4 Environment 3.5 Return value 3.6 Special calls 3.7 Generic functions", " Chapter 3 Functions 3.1 Types Find function “type” with typeof() builtin (primitive functions e.g. sum) special (primitive functions e.g. [) closure (functions built upon primitive functions, they always have their own environment) 3.1.1 Primitive functions Implemented in C Separated into builtin and special builtin: arguments evaluated before passed to C code special: unevaluated arguments passed to C code C code called via .Primitive() or .Internal() .Primitive() for pure C code .Internal() for mixtures of R and C code body(), formals() and environment() are NULL (see 3.2) All in base package Check with is.primitive() Many primitive function can be used without the classical syntax functionname() (see 3.6). Backticks ` let you refere to objects that have otherwise reserved or illegal name. 3.2 Function components body() Code inside the function. formals() List of formal arguments which controls how you can call the function. Chapter 3.3 environment() “Map” of the location of the function’s variables. Chapter 3.4 Like other objects, functions have certain attributes srcref (source reference): Attribute which all functions have. Returns source code (similar to body() but with comments and formatting) additional attributes possible myfun &lt;- function(x) { x^2 # with comment } attributes(myfun) ## $srcref ## function(x) { ## x^2 # with comment ## } body(myfun) ## { ## x^2 ## } 3.3 Arguments Two types of arguments Formal arguments (stated in function definition) Actual arguments (explicetly passed to the function when you call it) How to get/set formal arguments Get formal argument: formals() Set formal arguments: `formals&lt;-` (replacement function: change default formals, add formals, remove formals) formals() without arguments will list the arguments of the function which calls it myfunction &lt;- function(x = 1, y = 2) x + y formals(myfunction) ## $x ## [1] 1 ## ## $y ## [1] 2 myfunction() ## [1] 3 formals(myfunction) &lt;- list(x = 3, y = 4) myfunction() ## [1] 7 (function(x) formals())() ## $x Arguments are matched by the following hirarchy Complete name Partial name (prefix maching) Position Use do.call() to pass arguments containd in a list to a function. Use missing() to check if a formal argument has been manually set. 3.3.1 Lazy evaluation: Arguments are evaluated when they are used If they are never used within a function, they might never be evaluated \\(\\Rightarrow\\) not saved in the environment of that function To avoid problems in loops which return functions, make sure to force() the evaluation of the objects which are needed for the returned function Example: add() is a function in the global environment which returns a function Each function in the list adders_bad/adders_good are in separate environments without force(x) x is not evaluated in those environments x is lazily evaluated the first time that you call one of the adder functions. At this point, the loop is complete and the final value of x is 10. Therefore x is evaluated in all environments to have a value of 10. # wrong add &lt;- function(x) function(y) x + y adders_bad &lt;- vector(&quot;list&quot;, 10) for (i in seq_along(adders_bad)) adders_bad[[i]] &lt;- add(i) adders_bad[[1]](10) # should be 11 ## [1] 20 adders_bad[[10]](10) ## should be 20 ## [1] 20 get(&quot;x&quot;, envir = environment(adders_bad[[1]])) # should be 1 ## [1] 10 # good add &lt;- function(x){ force(x) function(y) x + y } adders_good &lt;- vector(&quot;list&quot;, 10) for (i in seq_along(adders_good)) adders_good[[i]] &lt;- add(i) adders_good[[1]](10) # should be 11 ## [1] 11 adders_good[[10]](10) ## should be 20 ## [1] 20 get(&quot;x&quot;, envir = environment(adders_good[[1]])) # should be 1 ## [1] 1 An unevaluated argument is called a promise. A promise is made up of two parts: The expression which gives rise to the delayed computation. The environment where the expression was created and where it should be evaluated. 3.3.2 Elipsis ... This argument will match any arguments not otherwise matched, and can be easily passed on to other functions. 3.4 Environment 3.4.1 Lexical scoping Scoping: Where to look for objects Lexical: Scoping is determined where the function is defined (not where it is called) Rules If a name is not defined inside a function, R will look one level up Example: x is searched in the environment of each function in the following order h \\(\\rightarrow\\) g \\(\\rightarrow\\) f \\(\\rightarrow\\) global environment x &lt;- 2 f &lt;- function(){ g &lt;- function() { h &lt;- function() x h() } g() } f() ## [1] 2 Assigning a function also assignes a certain environment (environment property) Example: Function j returns a function (which connects x and y) Assigning j(1) to k makes k an function with the environment property pointing to the environment created by running j() (the function where the output function was defined). This environment contains x and y j &lt;- function(x) { y &lt;- 2 function() { c(x, y) } } k &lt;- j(1) k() ## [1] 1 2 Object saved in a higher environment are not found below Example: a is not saved except within function A new call of j will not find previous a Functon will always return 1 exept if we save a j &lt;- function() { if (!exists(&quot;a&quot;)) { a &lt;- 1 } else { a &lt;- a + 1 } a } j() ## [1] 2.34 3.5 Return value The last expression evaluated in a function becomes the return value return() usful to stop evaluation and return error invisible() usful to invisible return an object (e.g. for ploting functions) pure functions: functions which change nothing except for what they return Few non-pure functions library() which loads a package, and hence modifies the search path. setwd(), Sys.setenv(), Sys.setlocale() which change the working directory, environment variables, and the locale, respectively. plot() and friends which produce graphical output. write(), write.csv(), saveRDS(), etc. which save output to disk. options() and par() which modify global settings. S4 related functions which modify global tables of classes and methods. Random number generators which produce different numbers each time you run them. on.exit() evaluates expression when function call is finished Example in_dir &lt;- function(dir, code) { old &lt;- setwd(dir) on.exit(setwd(old)) ## what function does... } 3.6 Special calls name description Built-in examples Your own Control flow operators Decide which line is evaluated if, else, for, while, break Subsetting operators Subset an object [, [[, $ Infix operators function name comes in between its arguments %in%, %*%, +, *, ^, &gt;, &amp;, &lt;-, … %myname% Replacement functions Replace an existing object &lt;-, [&lt;-, names&lt;-, levels&lt;-, … myname&lt;- All special functions can also be called like a “normal” function `[`(letters[1:10], 2) ## [1] &quot;b&quot; Replacement function make some changes to the data and assign the new output to the first argument x &lt;- 1:10 names(x) &lt;- letters[1:10] # user friendly x &lt;- `names&lt;-`(x, letters[1:10]) ## behind scenes this is executed You can create your own infix and replacement functions. This is a useful example of providing a default value in case the output of another function is NULL: `%||%` &lt;- function(a, b) if (!is.null(a)) a else b function_that_might_return_null() %||% default value 3.7 Generic functions Depending on the class of the first argument, different methods of a function are called by UseMethod() class() determines class of object is.*() logic, if object is of class * methods() return all available methods for a certain functionname or a certain class Methods ending with an asterisks * are not exported in the namespace, meaning they should not explicitly be called by the user. Get their source code with getAnywhere() or with 3 columns e.g. lme4:::getOptfun methods(print) # all methods for function name print methods(class = &quot;matrix&quot;) # all methods for class matrix print ## standardGeneric for &quot;print&quot; defined from package &quot;base&quot; ## ## function (x, ...) ## standardGeneric(&quot;print&quot;) ## &lt;environment: 0x000001e825f26060&gt; ## Methods may be defined for arguments: x ## Use showMethods(print) for currently available ones. head(methods(print)) ## [1] &quot;print,ANY-method&quot; &quot;print,diagonalMatrix-method&quot; ## [3] &quot;print,sparseMatrix-method&quot; &quot;print.aareg&quot; ## [5] &quot;print.abbrev&quot; &quot;print.acf&quot; 3.7.1 S3 and S4 How to see source code Debug non-exported function Theory of Object oriented programming in R "],["env.html", "Chapter 4 Environments 4.1 General properties 4.2 Environment of functions 4.3 Packages 4.4 Examples", " Chapter 4 Environments 4.1 General properties 4.1.1 Definition “Map” of the location of the function’s variables. Objects of the enviromentent are stored somewhere in memory Environment contains names and associated pointers to the place in memory Contrary to lists, environments contain always named entries order does not matter have enclosing environments cannot be copied but only replaced Every object in R lives in an environment An Environment contains two things Frame: collection of named objects Enclosing environment/“Parent environment”: reference to another environment Figure 4.1: Environments consist of a frame containing pointers to objects and a pointer to the enclosing environment. The sequence of all pointers make up the search path. parent environment ≠ parent frame: The enclosing environment is distinguished from the parent frame: the latter (returned by parent.frame()) refers to the environment of the caller of a function (call stack). new.env(): create new environment Access environment by name: as.environment(\"package:stats\") Access namespaces by name: asNamespace(\"stats\") Elements of enviornment can be accessed with $ parent.env(): find enclosing environment parent.env&lt;- replacement function to change enclosing environment 4.1.2 Attributes Name: new environemnts get hexadecimal names (location of the environment in memory). A name attribute can be added to have easier recognizable names. get name with environmentName() set name with attr(x, \"name\") &lt;- \"Cool Name 4.1.3 Special environments R_EmptyEnv Can be accessed with emptyenv() Only environment without an enclosing environment. base Can be accessed with baseenv() Environment of the base package R_GlobalEnv Can be accessed with globalenv() or .GlobalEnv Current environment when you start R Current/“local” environment Can be accessed with environment() without argument. Every time R runs an expression, it is run in one current environment Value of variables defined in an expression are saved in memory and the pointer to that memory is saved in the current environment 4.1.4 Search path and search list List of environments in a specified order Each item’s enclosing environemnt is the next item Search path ≠ search list Search path Always starts from .GlobalEnv Called with search() Search list Always starts from current environment Called with library(pryr); parenvs(all = TRUE) The value of an object called by its name is searched along the search list first in the current environment second in the enclosing environment of the current ennvironment third in the enclosing environment of the enclosing environment, and so on … library() puts the package environment directly below .GlobalEnv and load the namespace of the package attach() let you attache any list/environment to the search path (at any position) :: operator skips the search list and goes directly to the namespace of a certain environment The package namespace will be loaded if it was not loaded before the call, but the package will not be attached to the search path. ::: operator let you access internal (private) objects of a namespace (at your own risk!) If you do not know the namespace of the object you can use getAnywhere() to access internal and exported objects (public and private) 4.1.5 Objects within the environment ls() stands for list. Lists all objects of a certain environment Objects starting with a . are hidden. Use all.names = TRUE to show them ls.str() lists all objects and applies str() to all objects assign(): create an object in a specific environment &lt;- creates an object in the current environment &lt;&lt;- replaces existing object somewhere in the search list or if not existing defines it in R_GlobalEnv exists() returns boolean if an object with the specified name exists in the environment get() return the value of a named object rm() remove an object from a specified environment All those functions can be applied to a specific environment using the argument pos By default pos = -1L which means current environment By position in the search list: pos = 1 means first entry in search path By name: pos = \".GlobalEnv\" By a specific environment pos = as.environment(\"package:base\") assign(&quot;x&quot;, 1:3, envir = .GlobalEnv) # same as x &lt;- 1:3 but specific ls() ## [1] &quot;a&quot; &quot;add&quot; &quot;adders_bad&quot; &quot;adders_good&quot; &quot;f&quot; ## [6] &quot;form1&quot; &quot;form2&quot; &quot;i&quot; &quot;in_dir&quot; &quot;j&quot; ## [11] &quot;k&quot; &quot;myexpr&quot; &quot;myfun&quot; &quot;myfunction&quot; &quot;myobj&quot; ## [16] &quot;myprint&quot; &quot;mystrings&quot; &quot;mytab&quot; &quot;pkgTest&quot; &quot;x&quot; ## [21] &quot;y&quot; get(&quot;x&quot;, &quot;.GlobalEnv&quot;) ## [1] 1 2 3 rm(list = ls()) ## removes all objects from current environment Determine framing environment of an object There is no easy way to query an object for the environment that owns it. It is possible that two or more environments own the same object. One object name can refere to several objects (see conflicts()) If you want to see the first environment in the search list containg an object with a certain name use library(pryr); where(\"x\") If you want to see all packages which contain a certain name use find() 4.2 Environment of functions p_env &lt;- function() print(environment()) p_env() # returns function environment ## &lt;environment: 0x000001e82ed76c40&gt; environment(p_env) # returns environment property ## &lt;environment: R_GlobalEnv&gt; age = 32 MyFunction = function(){ age = 22 FromLocal = function() { print( age + 1 ) } FromGlobal = function() { print( age + 1 ) } NoSearch = function() { age = 11; print( age + 1 ) } environment( FromGlobal ) = .GlobalEnv FromLocal() FromGlobal() NoSearch() } MyFunction() ## [1] 23 ## [1] 33 ## [1] 12 Functions are related with three environments Function environment Every time R executes a function it creates a new local environment. Variables (e.g. actual arguments) created inside that function will live inside that new environment They will not overwrite variables by the same name outside the function’s environment When the function ends, the last value is returned and the environment is deleted There is one exception: If the function environment is enclosing environment of a still existing function, it will not be deleted (see chapter 12.1). Framing environment Where it is saved Framing environment contiains function name and pointer to memory where function is stored Determines if the function is found when it is called by name Environment property Where it should run Environment property becomes enclosing environment of function environment (local environment created by calling the function) Determines if the objects in the function are found Get environment object with environment(&lt;function name&gt;) Change environment property with environment(myfun) &lt;- asNamespace('stats') By default: Framing environment = Environment property = Environment in which function was defined Can be changed with environment&lt;- replacement function Figure 4.2: The framing environment (green) is not necessarily the environment property of the function (blue). The Environment Property points to another environment and defines the search list of a function. Search list ≠ call stack: the call stack is a list of hirarchical function calls where higher functions are executed within lower functions. This does not mean that the environment property of the higher function is the lower function. Lexical scoping ≠ dynamic scoping: Lexical scoping means variables are searched where the function was defined, dynamic scoping means variables are searched where the function was called. R is closer to lexical scoping. 4.3 Packages Each package has 3 associated environements Package environment Namespace environment Imports environment 4.3.1 Package environment Contains all exported (public) objects of the package (objects that the package author wants you to see) 4.3.2 Namespace environment Contains all objects of the package (public and private) 4.3.3 Imports environment Contains all objects from other packages that are explicitly stated requirements for a package to work properly. Packages which are imported by another package are listed in CRAN (see example of ggplot). Advantage: Functions within a package always search for objects in the following order Within the function environment Within the package namespace Within the namespace of imported packages Within the base namespace Along normal search path (.GlobalEnv → package:base) If any package in the search path redefines any basic function (e.g. +), it will not affect the functions in the package as all objects used by the package are either imported or in the base namespace. Figure 4.3: The environment property of a function in any package is the namespace of the package. The enclosing environment of namespace is imports:package. The environment property of the functions within imports:package is again the namespace of their package. Box: environment, Dotted arrows: environment property, solid arrows: enclosing environment Figure 4.4: Map of the world. All search lists and environment properties in R. See how your current map of the world looks like (which package are attached, which namespaces are loaded) sessionInfo() ## R version 4.2.3 (2023-03-15 ucrt) ## Platform: x86_64-w64-mingw32/x64 (64-bit) ## Running under: Windows 10 x64 (build 19045) ## ## Matrix products: default ## ## locale: ## [1] LC_COLLATE=English_United Kingdom.utf8 ## [2] LC_CTYPE=English_United Kingdom.utf8 ## [3] LC_MONETARY=English_United Kingdom.utf8 ## [4] LC_NUMERIC=C ## [5] LC_TIME=English_United Kingdom.utf8 ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] DataRZ_0.1.0 FunRZ_0.1.0 GGally_2.1.2 ggplot2_3.4.2 ## [5] lmerTest_3.1-3 multcomp_1.4-23 TH.data_1.1-1 survival_3.5-5 ## [9] mvtnorm_1.1-3 car_3.1-2 MASS_7.3-58.3 lme4_1.1-32 ## [13] Matrix_1.5-4 faraway_1.0.8 devtools_2.4.5 usethis_2.1.6 ## [17] carData_3.0-5 ## ## loaded via a namespace (and not attached): ## [1] nlme_3.1-162 fs_1.6.1 lubridate_1.9.2 ## [4] RColorBrewer_1.1-3 numDeriv_2016.8-1.1 backports_1.4.1 ## [7] tools_4.2.3 profvis_0.3.7 bslib_0.4.2 ## [10] utf8_1.2.3 R6_2.5.1 colorspace_2.1-0 ## [13] urlchecker_1.0.1 withr_2.5.0 tidyselect_1.2.0 ## [16] prettyunits_1.1.1 processx_3.8.0 compiler_4.2.3 ## [19] cli_3.6.1 sandwich_3.0-2 bookdown_0.33 ## [22] sass_0.4.5 checkmate_2.1.0 scales_1.2.1 ## [25] readr_2.1.4 callr_3.7.3 stringr_1.5.0 ## [28] digest_0.6.31 minqa_1.2.5 rmarkdown_2.21 ## [31] pkgconfig_2.0.3 htmltools_0.5.5 sessioninfo_1.2.2 ## [34] fastmap_1.1.1 highr_0.10 htmlwidgets_1.6.2 ## [37] rlang_1.1.0 rstudioapi_0.14 shiny_1.7.4 ## [40] jquerylib_0.1.4 generics_0.1.3 zoo_1.8-11 ## [43] jsonlite_1.8.4 dplyr_1.1.1 magrittr_2.0.3 ## [46] Rcpp_1.0.10 munsell_0.5.0 fansi_1.0.4 ## [49] abind_1.4-5 lifecycle_1.0.3 stringi_1.7.12 ## [52] yaml_2.3.7 plyr_1.8.8 pkgbuild_1.4.0 ## [55] grid_4.2.3 promises_1.2.0.1 forcats_1.0.0 ## [58] crayon_1.5.2 miniUI_0.1.1.1 lattice_0.21-8 ## [61] splines_4.2.3 hms_1.1.3 knitr_1.42 ## [64] ps_1.7.4 pillar_1.9.0 boot_1.3-28.1 ## [67] codetools_0.2-19 pkgload_1.3.2 glue_1.6.2 ## [70] evaluate_0.20 remotes_2.4.2 tzdb_0.3.0 ## [73] vctrs_0.6.1 nloptr_2.0.3 httpuv_1.6.9 ## [76] tidyr_1.3.0 gtable_0.3.3 purrr_1.0.1 ## [79] reshape_0.8.9 cachem_1.0.7 xfun_0.38 ## [82] mime_0.12 xtable_1.8-4 later_1.3.0 ## [85] tibble_3.2.1 memoise_2.0.1 timechange_0.2.0 ## [88] ellipsis_0.3.2 4.4 Examples 4.4.1 Example 1: pass object of class “acf” to plot() Generic function (OOP) calls UseMethod() =&gt; determines class goes along search list to find plot.acf() finds it in environment package:stats Function call function plot.acf() is called objects/functions within body of plot.acf are searched along search list Search list: function environment → namespace:stats → imports:stats → namespace:base → R_GlobalEnv → … → package:base Example 1 In plot.acf there is the function match.arg Will be found in namespace:base Example 2 In plot.acf there is the function par() Will be found in imports:stats because stats imports graphics When par() is called a new environment is created with new search list (function environment → namespace:graphics → imports:graphics → namespace:base → R_GlobalEnv → … → package:base) 4.4.2 Example 2: Search list ≠ call stack outer_fun &lt;- function(x, y = 1) x + y inner_fun &lt;- function(x) x + y y &lt;- 2 outer_fun(inner_fun(1)) ## [1] 4 ## inner function takes y from global.env NOT from outer_fun outer_fun &lt;- function(y){ inner_var &lt;- inner_fun(1) inner_var + y } outer_fun(100) ## [1] 103 ## Also here the inner function takes y from .GlobalEnv ## Note that two different y are used (once from .GlbalEnv and once from outer_fun function environment) 4.4.3 Example 3: Change package function Let’s assume an auxiliary function in package print it to console copy&amp;paste to *.R script “fix the bug” “send to console” (evaluate in globalenv) This is not sufficient but rather you must additionally get it to have the correct “enclosing environment” with environment(&lt;thisFun&gt;) &lt;- asNamespace(\"pkgName\") "],["settings.html", "Chapter 5 Settings 5.1 Error language 5.2 Local", " Chapter 5 Settings options() set and query global options which affect the way in which R computes and displays its results Sys.setenv() set or unset environment variables Sys.setlocale() set locale sessionInfo() print information about current R session par() graphical parameters palette() Current color palette options(digits = 3) # by default 7 digits are printed 5.1 Error language ## default error language operating system Sys.getenv(&quot;LANG&quot;) ## [1] &quot;&quot; not_existing_object ## Error in eval(expr, envir, enclos): object &#39;not_existing_object&#39; not found ## error language on German (Seems NOT to work in R Markdown) Sys.setenv(LANG=&quot;de&quot;) not_existing_object ## Error in eval(expr, envir, enclos): Objekt &#39;not_existing_object&#39; nicht gefunden ## error language on English Sys.setenv(LANG=&quot;en&quot;) not_existing_object ## Error in eval(expr, envir, enclos): object &#39;not_existing_object&#39; not found 5.2 Local x &lt;- strptime(x = &quot;10.05.1993&quot;, format = &quot;%d.%m.%Y&quot;) ## default local of operating system Sys.getlocale(&quot;LC_TIME&quot;) ## [1] &quot;C&quot; format(x = x, &quot;%B&quot;) ## [1] &quot;May&quot; ## local German_Switzerland if(.Platform$OS.type == &quot;unix&quot;){ Sys.setlocale(&quot;LC_TIME&quot;, &quot;de_CH.UTF-8&quot;) } else if(.Platform$OS.type == &quot;windows&quot;){ Sys.setlocale(&quot;LC_TIME&quot;, &quot;German&quot;) } format(x = x, &quot;%B&quot;) ## [1] &quot;Mai&quot; ## local English Sys.setlocale(&quot;LC_TIME&quot;, &quot;C&quot;) format(x = x, &quot;%B&quot;) ## [1] &quot;May&quot; "],["miscellaneous.html", "Chapter 6 Miscellaneous 6.1 How does R save numbers 6.2 How packages can exist 6.3 Good practice in R programming", " Chapter 6 Miscellaneous 6.1 How does R save numbers Top question in the FAQ page of CRAN: 7.31 Why doesn’t R think these numbers are equal? Strange example: x1 &lt;- seq(0, 1, by = 0.1) x2 &lt;- 0:10 / 10 x1 == x2 ## [1] TRUE TRUE TRUE FALSE TRUE TRUE FALSE FALSE TRUE TRUE TRUE The numbers are not equal even if they are printed the same way by default. We find the true values if we print more number of digits print(x1, digits = 17) ## [1] 0.00000000000000000 0.10000000000000001 0.20000000000000001 ## [4] 0.30000000000000004 0.40000000000000002 0.50000000000000000 ## [7] 0.60000000000000009 0.70000000000000007 0.80000000000000004 ## [10] 0.90000000000000002 1.00000000000000000 print(x2, digits = 17) ## [1] 0.00000000000000000 0.10000000000000001 0.20000000000000001 ## [4] 0.29999999999999999 0.40000000000000002 0.50000000000000000 ## [7] 0.59999999999999998 0.69999999999999996 0.80000000000000004 ## [10] 0.90000000000000002 1.00000000000000000 The saved numbers are not precisely the number we would expect. There are two reasons for that: Rounding to store decimal numbers Binary representation of decimal numbers Rounding decimal numbers Storing a decimal numbers (double) with infinite precision uses an infinite amount of memory. Therefore doubles are rounded before they are stored to the computer: x &lt;- 1/3 print(x, digits = 22) ## [1] 0.3333333333333333148296 only 17 digits after the comma are stored when calculating 1/3 Binary representations But why was it not possible to store 1/10 precicely even as it has only one digit after the comma? Computers use binary representations to store data. If we write 0.1 in binary representation it has infinite decimal places (see here). Therefore the number has to be rounded and is no longer precise. Numbers with finite decimal places in binary are fraction of \\(m / n\\) with \\(n\\) in the form \\(n = 2^k, k \\in \\{0,1,\\dots\\}\\) Examples: finite decimal places in binary: 1/2, 3/4, 13/16 infinite decimal places in binary: 1/10, 2/10, 3/10, 4/10 6.1.1 How to avoid problems with doubles Do not use ‘==’ for numbers unless they are integer (or otherwise known to be exact) Compare (vectors of) numbers with all.equal() all.equal(x1, x2) ## [1] TRUE all.equal(x1, x2, tol = 1e-10) ## [1] TRUE all.equal(x1, x2, tol = 0) ## -&gt; shows the *relative* difference ## [1] &quot;Mean relative difference: 1.734723e-16&quot; abs(x1 - x2) &lt;= 1e-10 * abs((x1 + x2)/2) # alternatively ## [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE 6.1.2 More interesting information about double representation Many double representation properties depend on the platform (often 64-bit) help page of .Machine Element Explanation Typical Value In binary double.epsilon smallest number you can add such that 1 + x != 1 2.220446e-16 2^-52 double.xmin smallest possible floating point 2.225074e-308 2^-1022 double.max.exp largest exponent possible for double 1024 2^10 integer.max largest possible integer 2147483647 2^31 and more … Note that you can store much larger numbers with double than with integers. Numbers larger than the largest integer are stored as NA and numbers larger than the largest double are stored as Inf. 2147483647L + 1L ## Warning in 2147483647L + 1L: NAs produced by integer overflow ## [1] NA 2^1023.9999 ## [1] 1.797569e+308 2^1024 ## [1] Inf 6.2 How packages can exist Figure 6.1: Four formes how a package can be saved (upper: source, lower: binary) 6.3 Good practice in R programming Use seq_len(n) and seq_along(vec) instead of 1:n for loops works if n is 0 or vec is empty Fast "],["data-importexport.html", "Chapter 7 Data Import/Export 7.1 Directories 7.2 Read data 7.3 Clipboard 7.4 Github", " Chapter 7 Data Import/Export 7.1 Directories 7.1.1 Functions setwd() Set working directory dir() List the files in a directory save() Save single object save.image() Save whole workspace load() Load object/workspace source() Execute R code from a file ## Extract the path of all .csv files of a directory dir(&#39;mydirectory/&#39;, pattern = &#39;//.csv$&#39;, full.names = TRUE) ## Source from github source(&quot;https://raw.githubusercontent.com/retodomax/reponame/master/foldername/filename.R&quot;) 7.1.2 Path to your file Absolute path read.csv(\"C:/Users/Reto/Downloads/myfile.csv\") Not recomended, impossible to share between computers Relative path read.csv(\"Data/import/myfile.csv\") read.csv(\"../../Data/import/myfile.csv\") Goes two levels up Starts at you working directory R project have fixed wd getwd(), setwd() Rmarkdown sets its working directory to the folder which contains the Rmd file (“working directory = directory where this file lives” even if you are in a Rproj!). Do not change working directory but use relative path (maybe with ../) to get to your files. Consider using package here 7.2 Read data Read tables read.table() most general case sep = \"\" (separated by any white space, see help file), dec = \".\" read.csv() different default values sep = \",\" read.csv2() different default values sep = \";\", dec = \",\" read.delim() different default values sep = \"\\t\" read.delim2() different default values sep = \"\\t\", dec = \",\" Functions of package readr read_csv() separating value \",\" read_csv2() separating value \";\" read_delim() no default Read in with tribble() Data entry in code Column headings start with ~ Entries are separated by , people &lt;- tibble::tribble( ~name, ~key, ~value, #-----------------|--------|------ &quot;Phillip Woods&quot;, &quot;age&quot;, 45, &quot;Phillip Woods&quot;, &quot;height&quot;, 186, &quot;Phillip Woods&quot;, &quot;age&quot;, 50, &quot;Jessica Cordero&quot;, &quot;age&quot;, 37, &quot;Jessica Cordero&quot;, &quot;height&quot;, 156 ) 7.3 Clipboard write.table(mytable, &quot;clipboard&quot;, sep = &quot;\\t&quot;, row.names = FALSE) mytable &lt;- read.table(file = &quot;clipboard&quot;, sep = &quot;\\t&quot;, header = TRUE) 7.4 Github You can directly import files from Github Upload file to github.com/retodomax/myproject Get stable link to raw data - Go to file and click on button “Raw” - Copy url Import with mytable &lt;- read.delim(\"https://raw.githubusercontent.com/retodomax/myproject/master/filename.csv\") "],["data-handling.html", "Chapter 8 Data handling 8.1 Atomic vectors 8.2 Lists 8.3 dplyr functions 8.4 Basic functions 8.5 Add ons 8.6 tidyselect 8.7 Additinally useful", " Chapter 8 Data handling 8.1 Atomic vectors 8.1.1 Basic operations Arithmetic Comparison Logical + Addition &lt; less than !x logical NOT - Subtraction &gt; greater than x &amp; y logical AND (vectorized) * Multiplication &lt;= less or equal x &amp;&amp; y logical AND (single value) / Division &gt;= greater or equal x | y logical OR (vectorized) ^ Power of == equal x || y logical OR (single value) %% Modulo != unequal xor(x,y) logical exclusive OR %/% Integer division Order in which they are executed is defined in ?Syntax Examples 7 %% 2 # remainder ## [1] 1 7 %/% 2 # floor of division ## [1] 3 Figure 8.1: … 8.1.2 Factors Also see chapter 2.4 levels() print or overwrite labels of factor levels relevel() The levels of a factor are re-ordered so that the level specified by ref is first and the others are moved down. reorder() Reorder the factor levels according to another variable # Make level B the first level (reference value) InsectSprays$spray &lt;- relevel(InsectSprays$spray, ref = &quot;B&quot;) # Reorder levels of spray by median of count (first class should have lowest count median) InsectSprays$spray &lt;- reorder(InsectSprays$spray, InsectSprays$count, FUN = median) boxplot(count ~ spray, data = InsectSprays) forcats package fct_reorder() Reorder the factor levels according to another variable fct_reorder2() Reorder the factors according to last value of x axis fct_inorder() Reorder factors levels by first appearance or frequency fct_relevel() Set a certain level first or last (or at certain position) fct_infreq() Reorder levels by the frequency in which they appear in the data (highest frequency first) fct_rev() Reverse order of factor levels fct_lump() Combine some factor levels to new factor level 8.1.3 Date Time R has 3 formates to store Date-Time POSIXct seconds since UNIX epoch 01.01.1970 00:00:00 POSIXlt list with year, month, day, … Date String in form “YYYY-MM-DD” Some formats are better suited for specific objectives. E.g. ggplot2 can only work with POSIXct not POSIXlt. Transform between string and Date-Time format From string to Date-Time string -&gt; POSIXlt strptime() (means string parser time, i.e. parses a string to a date-time or date) as.POSIXlt() string -&gt; POSIXct as.POSIXct() string -&gt; Date as.Date() From POSIXt to character strftime() (means string formatter time, i.e. formats a time to a string) format() as.character() now &lt;- Sys.time() snow &lt;- strftime(now, format = &quot;%d.%m.%Y&quot;) ### from POSIXxt -&gt; character # format() (methods format.POSIXlt and format.POSIXct) # as.character() # strftime() strftime(now, format = &quot;%d.%m.%Y&quot;) format(now, format = &quot;%d.%m.%Y&quot;) as.character(now, format = &quot;%d.%m.%Y&quot;) ### character -&gt; POSIXlt # strptime() (x &lt;- strptime(snow, format = &quot;%d.%m.%Y&quot;)) class(x) (x &lt;- as.POSIXlt(snow, format = &quot;%d.%m.%Y&quot;)) class(x) ### character -&gt; POSIXct # as.POSIXct() (x &lt;- as.POSIXct(snow, format = &quot;%d.%m.%Y&quot;)) class(x) Meaning Meaning %Y Year (2004) %y Year (04) %m Month (01-12) %B Month (May) %d Day (01-31) %H Hours (00-23) %M Minute (00-59) %S Second (00-61) %j DOY (001-366) %V WOY (00-53) %F YYYY-MM-DD %T HH:MM:SS All conversion specification can be found here Functions Sys.Date() get current Date Sys.time() get current Date-Time as.POSIXlt(x, tz = \"America/Denver\") change timezone difftime() Time intervals / differences weekdays() returns e.g. “Saturday” lubridate package 8.1.4 Strings Function Action nchar(x) Number of letters gsub('Peter', 'Pete', x) Replaces all Peter with Pete sub('Peter', 'Pete', x) Replaces first Peter with Pete grep('Pete', x) Which entry in a vector contain ‘Pete’ (returns rownumber) strsplit(x, '_') Splits strings at ’_’ and makes list out of them substr(x, 1, 1) Extract or replace substrings in a character vector (from start to stop, here: first letter) match() Returns a vector of the positions of (first) matches %in% Similar to match, returns a logical vector toupper(x) Makes all letters uppercase tolower(x) Makes all letters lowercase stringr package 8.2 Lists split() split vector into list separated by factor unlist() unite list into one vector 8.2.1 Apply familiy apply(x, c(1,2), FUN) # apply function on one or several dimension of array # 1: row, 2: col, c(1,2) both, 3: third dim in array lapply(x, FUN, …) # apply on list, return list sapply(x, FUN) # apply on list, return simplified list (array, matrix, vector) tapply(x, factor, FUN) # apply function separately for different factor levels mapply(FUN, ...) # apply function to multiple vectors # e.g. apply function on each row of data.frame # mapply(testFun, df$x, df$z) by(x, index, FUN, …) # x can be whole data.frame outer() # get a matrix based on a function with two parameters 8.2.2 Long and wide format reshape() long &lt;- Indometh #Data wide &lt;- reshape(Indometh, v.names = &quot;conc&quot;, idvar = &quot;Subject&quot;, timevar = &quot;time&quot;, direction = &quot;wide&quot;) long &lt;- reshape(wide, v.names = &quot;conc&quot;, idvar = &quot;Subject&quot;, timevar = &quot;time&quot;, direction = &quot;long&quot;) head(long) ## Subject time conc ## 1.0.25 1 0.25 1.50 ## 2.0.25 2 0.25 2.03 ## 3.0.25 3 0.25 2.72 ## 4.0.25 4 0.25 1.85 ## 5.0.25 5 0.25 2.05 ## 6.0.25 6 0.25 2.31 head(wide) ## Subject conc.0.25 conc.0.5 conc.0.75 conc.1 conc.1.25 conc.2 conc.3 conc.4 ## 1 1 1.50 0.94 0.78 0.48 0.37 0.19 0.12 0.11 ## 12 2 2.03 1.63 0.71 0.70 0.64 0.36 0.32 0.20 ## 23 3 2.72 1.49 1.16 0.80 0.80 0.39 0.22 0.12 ## 34 4 1.85 1.39 1.02 0.89 0.59 0.40 0.16 0.11 ## 45 5 2.05 1.04 0.81 0.39 0.30 0.23 0.13 0.11 ## 56 6 2.31 1.44 1.03 0.84 0.64 0.42 0.24 0.17 ## conc.5 conc.6 conc.8 ## 1 0.08 0.07 0.05 ## 12 0.25 0.12 0.08 ## 23 0.11 0.08 0.08 ## 34 0.10 0.07 0.07 ## 45 0.08 0.10 0.06 ## 56 0.13 0.10 0.09 dplyer version pivot_longer() pivot_wider() 8.2.3 Aggregate myData &lt;- aggregate(# 1) Object to aggregate mtcars$mpg, # 2) Factors for bilding subgroups by = list(cyl = mtcars$cyl, gears = mtcars$gear), # 3) Functions of aggregation FUN = function(x) c(mean = mean(x), sd = sd(x), n = length(x))) myData &lt;- do.call(data.frame, myData) #reshape output to data frame ## Also possible to aggregate several variables at once aggregate(cbind(var1, var2, var3) ~ grouping1 + grouping2, data = x, FUN = function(x) c(mean = mean(x), var = var(x), n = length(x))) 8.2.4 SQL joins # Inner join: merge(x = df1, y = df2, by = &quot;CustomerId&quot;) # Outer join: merge(x = df1, y = df2, by = &quot;CustomerId&quot;, all = TRUE) # Left outer: merge(x = df1, y = df2, by = &quot;CustomerId&quot;, all.x = TRUE) # Right outer: merge(x = df1, y = df2, by = &quot;CustomerId&quot;, all.y = TRUE) # Cross join: merge(x = df1, y = df2, by = NULL) More explanations here dplyr joins See here dplyr::inner_join() dplyr::left_join() dplyr::right_join() dplyr::full_join() dplyr::semi_join() dplyr::nest_join() dplyr::anti_join() 8.3 dplyr functions 8.4 Basic functions filter() select rows arrange() sort rows (in combination with desc()) select() select columns mutate() create new column summarise() aggregate group_by() group 8.5 Add ons slice() select rows based on location slice_head() slice_tail() rename() change name of column relocate() change order of columns 8.6 tidyselect See ?select Basic :, !, &amp;, |, c() Helper everything() last_col() Pattern matching starts_with() ends_with() contains() contain a literal string matches() matches a regular expression num_range() matches a numerical range like x01, x02, x03. Character vector all_of() error if one is not found any_of() no error Help manual Based on arbitrary function where() 8.7 Additinally useful accross() apply the same transformation to multiple column nest() https://drsimonj.svbtle.com/running-a-model-on-separate-groups case_when() as an alternative to ifelse() "],["regular-expressions.html", "Chapter 9 Regular expressions", " Chapter 9 Regular expressions string input → regexp → match each special character (.!?*+\\,…) needs to be escaped because \\ is also used to escape characters in strings we need to escape it in order to send a litheral “\\” to regexp writeLines() see what is actually sent to regex by providing a certain string stringr::words common words to test your regex str_view() and str_view_all() to test your regex visibly "],["basics.html", "Chapter 10 Basics 10.1 Objects in Enviornment 10.2 Functions 10.3 Control structures", " Chapter 10 Basics 10.1 Objects in Enviornment ls() # list all objects in environment rm() # remove specific objects rm(list=ls()) # remove all Objects rm(list=setdiff(ls(), &quot;keep&quot;)) # keep only one object 10.2 Functions function() Define function ... Ellipsis, placeholder for some arguments within a function stop() interrupts function print() print object (Within functions, R is not autoprinting) return() specify explicit what to return (otherwise last object called) invisible() returns invisible (just for assignment &lt;-) missing() returns TRUE if an argument has not been specified explicitly. Examples FunNew &lt;- function(x = 1, y = &quot;lalala&quot;, z, ...){ stopifnot(is.numeric(x), is.character(y)) # function stopes with error if(x &gt; 10){ stop(&quot;`x` bigger than 10&quot;) # function stoped with error } if (missing(z)) {z &lt;- &quot;z not defined&quot;} print(x+1) print(y) return(z) print(x) # will not be printed x+2 # will not be returned } 10.2.1 Function debugging traceback() stack of functions called before error occured browser() enters browser mode if called within function Within brower mode, you can interact with objects in function environment Hit Q =&gt; exit browser mode Hit Enter =&gt; evaluate next line of function In RStudio Browser mode starts automatically if error occures Set Breakpoints/browser() by clicking in script panel on code number (signaled by red dot) 10.3 Control structures 10.3.1 Conditional statements ## if else if (condition) { # do that } else if (condition2) { # do something else } else { # } ## Vectorized ifelse(condition, yes, no) For condition use TRUE, FALSE, &gt;, &lt;, is.na(), !, %in%, ||, &amp;&amp;, … as soon as || sees the first TRUE it returns TRUE without computing anything else. As soon as &amp;&amp; sees the first FALSE it returns FALSE. # cut() splits vector into factor groups # instead of: if(x &lt; -3) {x &lt;- “low”} else … x &lt;- rnorm(100) cut(x, breaks = -3:3) # switch() jumpes to certain operation (e.g. plus, minus, …) switch_fun &lt;- function(x, y, op) { switch(op, plus = x + y, minus = x - y, stop(&quot;Unknown op!&quot;) ) } # switch() with itegers switch (1, print(&quot;first case&quot;), print(&quot;second case&quot;) ) ### NOT switch (1, 1 = print(&quot;first case&quot;), 2 = print(&quot;second case&quot;) ) ## results in error 10.3.2 Loops Types of loops for(i in 1:10) {} for-loop, most useful while(cond) {} while-loop, most general repeat {} repeat-loop, needs somewhere if(cond){break} to leave loop Components Output Before you start the loop, you have to allocate sufficient space for the output output &lt;- vector(\"list\", length(x)) instead of list use \"integer\", \"double\", \"character\", \"logical\" instead of length(x) use nrow(), ncol() Sequence Loop over numeric indices i in seq_along(x) Alternative loop over names (i in names(x)) loop over elements (i in x) problematic for NA and not unique names/elements Body output[[i]] &lt;- my_function(x[[i]]) Preallocation ## Preallocation out &lt;- vector(mode = &quot;integer&quot;, length = 10) for(i in 1:10){ out[i] &lt;- i^2 } ## Never use growing output (slow) Output &lt;- NULL for(i in 1:10){ x &lt;- i^2 Output &lt;- c(Output, x) } Unknown output length Save it in a list and vectorise it later unlist() Save it in a list and combine it later cbind(), rbind() Save it in a character vector and paste it later str_c() means &lt;- c(1,50,100) out &lt;- vector(&quot;list&quot;, length(means)) for (i in seq_along(means)) { n &lt;- sample(100, 1) out[[i]] &lt;- rnorm(n, means[[i]]) } unlist(out) "],["performance.html", "Chapter 11 Performance 11.1 In general 11.2 Profiling 11.3 Microbenchmark 11.4 Use package compiler 11.5 Parallelise", " Chapter 11 Performance system.time() returns the CPU time used by an expression works well for relatively long computation times, not well for very short computation times runs the expr only once proc.time() similar to system.time() microbenchmark::microbenchmark() works well for very small timing steps runs the expr 100 times and calculates average runtimes 11.1 In general Look for existing solutions. Do less work. Vectorise. Parallelise. Avoid copies. Byte-code compile 11.2 Profiling Example: Open an Rprof file and start profiling Run a process Stop profiling Analyze the functions run during profiling Rprof(&quot;dumkoll.Rprof&quot;, interval = 0.005) # start profiling dd &lt;- dumkoll(50000, df=TRUE) Rprof(NULL) # stop profiling sr &lt;- summaryRprof(&quot;dumkoll.Rprof&quot;) sr 11.3 Microbenchmark Compare small pieces of code (here function1, function2, function3) library(microbenchmark) mbd &lt;- microbenchmark(function1(n), function2(n), function3(n)) 11.4 Use package compiler First compile a function before you apply it to data library(compiler) dumkoll2 &lt;- cmpfun(dumkoll) dumkoll2(&lt;data&gt;) 11.5 Parallelise Useful packages: foreach doParallel Example: library(doParallel) detectCores() # How many cores are available on my machine "],["functional-programming.html", "Chapter 12 Functional programming 12.1 Closures 12.2 Lists of functions", " Chapter 12 Functional programming Functionals: functions that take a function as an argument Closures: functions written by another function Anonymous function: function without name 12.1 Closures Not the same meaning as type closure (Chapter 3.1) Functions which were written by another function Have non-trivial environments (not R_GlobalEnv or a package’s environment) Enclosing environment is the function environment of the function which reated them The function “Enclose” this non-trivial environment Can access all its variables Two levels of parameters Child level (Function environment): does the work Parent level (Environment property): control parameter power &lt;- function(exponent) { function(x) x ^ exponent } square &lt;- power(2) square(2) ## [1] 4 Note: function environment of the call power(2) is not deleted in this case because it is the enclosing environment of the square() function. 12.2 Lists of functions Useful to apply several functions to one object x &lt;- 1:10 funs &lt;- list( sum = sum, mean = mean, median = median ) lapply(funs, function(f) f(x)) ## $sum ## [1] 55 ## ## $mean ## [1] 5.5 ## ## $median ## [1] 5.5 "],["r-from-the-shell.html", "Chapter 13 R from the shell", " Chapter 13 R from the shell Mainly two commands Rscript (newer one, preferred) R CMD BATCH (old one) Details see here Execute single commands Rscript -e &quot;x &lt;- rnorm(10); mean(x)&quot; Run R script Rscript reto_script.R Run R script and save image (workspace) Rscript --save reto_script.R Start running one script and continue working in the shell on another core Rscript reto_script.R &amp; Write a shell script which does some tasks and runs R scripts. The following shell script: starts a for loop (from 1 to 4) prints the loop number (called seed) Runs reto_script.R with different seeds saves the output to the file reto_script_loopnr.RData the &amp; runs differnt loop cicles on different cores in parallel. #!/bin/sh for seed in 1 4 do echo $seed Rscript -e &quot;set.seed($seed); source(&#39;reto_script.R&#39;);save(a, file=&#39;reto_script_$seed.RData&#39;)&quot; &amp; done "],["use-r-interactively-in-console-linux.html", "Chapter 14 Use R interactively in console (Linux)", " Chapter 14 Use R interactively in console (Linux) Go to shell and type R, hit Enter. Opens up interactive console. "],["run-sweave-from-console.html", "Chapter 15 Run Sweave from console", " Chapter 15 Run Sweave from console R CMD Sweave path/to/file.Rnw "],["extract-r-code-from-rnw-file.html", "Chapter 16 Extract R code from Rnw file", " Chapter 16 Extract R code from Rnw file R CMD Stangle path/to/file.Rnw "],["remote-servers.html", "Chapter 17 Remote Servers 17.1 UZH Thinlinc 17.2 ETH Euler 17.3 Renkulab 17.4 Get notification when finished", " Chapter 17 Remote Servers 17.1 UZH Thinlinc Make IMATH account https://www.math.uzh.ch/li/index.php?id=1794 Install Thinlinc client https://www.math.uzh.ch/li/?thinlinc Setup SSH keys https://wiki.math.uzh.ch/public/ssh 17.2 ETH Euler https://scicomp.ethz.ch/wiki/Getting_started_with_clusters 17.3 Renkulab https://renkulab.io/ 17.4 Get notification when finished beepr::beep() Mail notification 17.4.1 Mail notification Package mail Very simple No need for mail account Often does not work Package gmailr More tricky but much better Many resources https://github.com/r-lib/gmailr/blob/master/README.md https://github.com/jennybc/send-email-with-r/blob/master/README.md https://blog.mailtrap.io/r-send-email/ Set up gmailr Enable the Gmail API here Download and save credentials Run library(gmailr) gm_auth_configure(path = &quot;C:/Users/Reto/scripts/credentials_R_gmailr.json&quot;) gm_auth(&quot;reto93@gmail.com&quot;) Send Mails library(gmailr) gm_auth_configure(path = &quot;C:/Users/Reto/scripts/credentials_R_gmailr.json&quot;) gm_auth(&quot;PUT_THE_GMAIL_ADDRESS_ASSOCIATED_WITH_YOUR_GOOGLE_ACCOUNT_HERE&quot;) alert_mail &lt;- gm_mime() %&gt;% gm_to(&quot;PUT_A_VALID_EMAIL_ADDRESS_THAT_YOU_CAN_CHECK_HERE&quot;) %&gt;% gm_from(&quot;PUT_THE_GMAIL_ADDRESS_ASSOCIATED_WITH_YOUR_GOOGLE_ACCOUNT_HERE&quot;) %&gt;% gm_subject(&quot;RZ Alert&quot;) %&gt;% gm_text_body(&quot;Computation on IMATH finished&quot;) gm_send_message(alert_mail) Allow notifications Allow notifications for mails with subject RZ Alert Thunderbird Add-on Mailbox Alert Manage message filters Add rule that allows notification for specific mails "],["Plots.html", "Chapter 18 Base graphics 18.1 Graphical parameters par() 18.2 Graphics Size and Resolution 18.3 Colors 18.4 Mathematical annotation 18.5 High level plots 18.6 Low level plots 18.7 Plot Math Coordinate System 18.8 Plot empty", " Chapter 18 Base graphics 18.1 Graphical parameters par() Good overviews: Official Documentation Illustrated Documentation Book R in a Nutshell: A Desktop Quick Reference 18.1.1 Set graphical parameters Change global option par(xlog = TRUE) change for local plot plot(..., xlog = TRUE) When parameters are set, their previous values are returned in an invisible named list. Such a list can be passed as an argument to par to restore the parameter values. opar &lt;- par(xlog = TRUE) plot(...) par(opar) reset default dev.off() check current parameter par(&quot;xlog&quot;) ## [1] FALSE The parameters are defined for the currently active device Normally the Rstudio plot panel If png() or pdf() opend ⇒ only within this document dev.off() closes device and reset par() If png() or pdf() ⇒ the same par are active as they were before the device png() or pdf() was opend If Rstudio panel ⇒ the default par are active 18.1.2 Default Show default par() options par() ## $xlog ## [1] FALSE ## ## $ylog ## [1] FALSE ## ## $adj ## [1] 0.5 ## ## $ann ## [1] TRUE ## ## $ask ## [1] FALSE ## ## $bg ## [1] &quot;white&quot; ## ## $bty ## [1] &quot;o&quot; ## ## $cex ## [1] 1 ## ## $cex.axis ## [1] 1 ## ## $cex.lab ## [1] 1 ## ## $cex.main ## [1] 1.2 ## ## $cex.sub ## [1] 1 ## ## $cin ## [1] 0.15 0.20 ## ## $col ## [1] &quot;black&quot; ## ## $col.axis ## [1] &quot;black&quot; ## ## $col.lab ## [1] &quot;black&quot; ## ## $col.main ## [1] &quot;black&quot; ## ## $col.sub ## [1] &quot;black&quot; ## ## $cra ## [1] 28.8 38.4 ## ## $crt ## [1] 0 ## ## $csi ## [1] 0.2 ## ## $cxy ## [1] 0.02604167 0.06329115 ## ## $din ## [1] 6.999999 4.999999 ## ## $err ## [1] 0 ## ## $family ## [1] &quot;&quot; ## ## $fg ## [1] &quot;black&quot; ## ## $fig ## [1] 0 1 0 1 ## ## $fin ## [1] 6.999999 4.999999 ## ## $font ## [1] 1 ## ## $font.axis ## [1] 1 ## ## $font.lab ## [1] 1 ## ## $font.main ## [1] 2 ## ## $font.sub ## [1] 1 ## ## $lab ## [1] 5 5 7 ## ## $las ## [1] 0 ## ## $lend ## [1] &quot;round&quot; ## ## $lheight ## [1] 1 ## ## $ljoin ## [1] &quot;round&quot; ## ## $lmitre ## [1] 10 ## ## $lty ## [1] &quot;solid&quot; ## ## $lwd ## [1] 1 ## ## $mai ## [1] 1.02 0.82 0.82 0.42 ## ## $mar ## [1] 5.1 4.1 4.1 2.1 ## ## $mex ## [1] 1 ## ## $mfcol ## [1] 1 1 ## ## $mfg ## [1] 1 1 1 1 ## ## $mfrow ## [1] 1 1 ## ## $mgp ## [1] 3 1 0 ## ## $mkh ## [1] 0.001 ## ## $new ## [1] FALSE ## ## $oma ## [1] 0 0 0 0 ## ## $omd ## [1] 0 1 0 1 ## ## $omi ## [1] 0 0 0 0 ## ## $page ## [1] TRUE ## ## $pch ## [1] 1 ## ## $pin ## [1] 5.759999 3.159999 ## ## $plt ## [1] 0.1171429 0.9400000 0.2040000 0.8360000 ## ## $ps ## [1] 12 ## ## $pty ## [1] &quot;m&quot; ## ## $smo ## [1] 1 ## ## $srt ## [1] 0 ## ## $tck ## [1] NA ## ## $tcl ## [1] -0.5 ## ## $usr ## [1] 0 1 0 1 ## ## $xaxp ## [1] 0 1 5 ## ## $xaxs ## [1] &quot;r&quot; ## ## $xaxt ## [1] &quot;s&quot; ## ## $xpd ## [1] FALSE ## ## $yaxp ## [1] 0 1 5 ## ## $yaxs ## [1] &quot;r&quot; ## ## $yaxt ## [1] &quot;s&quot; ## ## $ylbias ## [1] 0.2 18.1.3 Device par(&quot;ask&quot;) # asks user before new figure is drawn ## [1] FALSE par(&quot;new&quot;) # if TRUE, plots next high-level plot above previous ## [1] FALSE 18.1.4 Device region Plot outside plotting region par(&quot;xpd&quot;) ## [1] FALSE FALSE \\(\\Rightarrow\\) clipped to the plot regions TRUE \\(\\Rightarrow\\) clipped to the figure region NA \\(\\Rightarrow\\) clipped to the device region 18.1.5 Coordinate sytem There are in total 9 coordinate sytems absolute \\((0,0)\\) in lower left device corner inches can be converted to cm with function cm() device usually in pixels (png) or points (pdf) lines based on mex (relative to font size) chars based on cex (font size) \\((0,0)\\) depend on what is plotted user user coordinates normalized ndc normalized device coordinates nic normalized inner region coordinates nfc normalized figure coordinates npc normalized plot coordinates Figure 18.1: Interval [0, 1] for different normalized coordinate systems Convert between coordinate system Use grconvertX() to convert between different coordinate systems Define lines coordinate system par(&quot;mex&quot;) # defines lines coordinate system from point size of text, &quot;height&quot; of one line (e.g. space between Line 0 and Line 1) ## [1] 1 18.1.6 Define device regions Useful links: Device regions, fig and fin, oma and mgp 18.1.6.1 Split device Several options (see here) array: par(mfrow = c(2,2)) (mfcol fills the array by columns) use par(\"mfg\") to plot a specific field in the array grid: layout(matrix()) arbitrary locations: par(fig = ...) combined with par(new=TRUE) split.screen() pairs() coplot() Example for copy paste par(mfrow = c(2, 2)) # 2-by-2 grid of plots par(oma = c(4, 4, 0, 0)) # make room (i.e. the 4&#39;s) for the overall x and y axis titles par(mar = c(2, 2, 1, 1)) # make the plots be closer together # now plot the graphs with the appropriate axes removed (via xaxt and yaxt), # remove axis labels (so that they are not redundant with overall labels, # and set some other nice choices for graphics parameters plot(runif(10), xlab = &#39;&#39;, ylab = &#39;&#39;, xaxt = &#39;n&#39;, las = 1, ylim = c(0, 1)) plot(runif(10), xlab = &#39;&#39;, ylab = &#39;&#39;, xaxt = &#39;n&#39;, yaxt = &#39;n&#39;, ylim = c(0, 1)) plot(runif(10), xlab = &#39;&#39;, ylab = &#39;&#39;, las = 1, ylim = c(0, 1)) plot(runif(10), xlab = &#39;&#39;, ylab = &#39;&#39;, yaxt = &#39;n&#39;, ylim = c(0, 1)) # print the overall labels mtext(&#39;x-axis title&#39;, side = 1, outer = TRUE, line = 2) mtext(&#39;y-axis title&#39;, side = 2, outer = TRUE, line = 2) Useful helper function FunNewPar &lt;- function(oma = c(0,0,2,2), mar = c(4,4,0,0), tcl = -0.3, mgp = c(2,0.5,0), cex.axis = 0.7, ps = 10, xpd = NA){ x &lt;- par(oma = oma, mar = mar, tcl = tcl, mgp = mgp, cex.axis = cex.axis, ps = ps, xpd = xpd) invisible(x) } Multiple plots with everything FunNewPar() Multiple plots without axis title FunNewPar(oma = c(1,1,2,2), mar = c(3,3,0,0)) Multiple plots without axis FunNewPar(oma = c(3,3,2,2), mar = c(1,1,0,0)) 18.1.6.2 Margins Define margine area using lines coordinate system par(&quot;oma&quot;) # Outer Margin Area ## [1] 0 0 0 0 par(&quot;mar&quot;) # Margine Area ## [1] 5.1 4.1 4.1 2.1 Define margine area using inches coordinate system par(&quot;omi&quot;) # Outer Margin Area ## [1] 0 0 0 0 par(&quot;mai&quot;) # Margine Area ## [1] 1.02 0.82 0.82 0.42 Define margine area using ndc/nfc coordinate system par(&quot;omd&quot;) # Start and endpoint of inner region c(x1, x2, y1, y2) ## [1] 0 1 0 1 par(&quot;fig&quot;) # Start and endpoint of figure region c(x1, x2, y1, y2) ## [1] 0 1 0 1 par(&quot;plt&quot;) # Start and endpoint of plot region c(x1, x2, y1, y2) ## [1] 0.1171429 0.9400000 0.2040000 0.8360000 Define region dimensions in inches par(&quot;fin&quot;) # Figure dimensions, (width, height) ## [1] 6.999999 4.999999 par(&quot;pin&quot;) # Plot dimensions, (width, height) ## [1] 5.759999 3.159999 18.1.6.3 Square plot par(&quot;pty&quot;) # pty = &quot;m&quot;: maximum, pty = &quot;s&quot;: square ## [1] &quot;m&quot; 18.1.7 User coordinates limits par(&quot;usr&quot;) # extremes of the user coordinate system (xmin, xmax, ymin, ymax) ## [1] 0 1 0 1 par(&quot;xaxs&quot;) # &quot;r&quot;: xlim +/- 4%, &quot;i&quot;: xlim ## [1] &quot;r&quot; 18.1.8 General appearence par(&quot;bg&quot;) # color for the background of the device region. NA =&gt; transparent ## [1] &quot;white&quot; par(&quot;fg&quot;) # color for the foreground (axes, boxes, plotting) ## [1] &quot;black&quot; 18.1.9 Symbols par(&quot;pch&quot;) # symbol ## [1] 1 par(&quot;cex&quot;) # magnifies text/symbols relative to default ## [1] 1 par(&quot;col&quot;) # symbol color ## [1] &quot;black&quot; 18.1.10 Lines par(&quot;lty&quot;) # line type ## [1] &quot;solid&quot; par(&quot;lwd&quot;) # line width ## [1] 1 par(&quot;col&quot;) # line color ## [1] &quot;black&quot; par(&quot;lend&quot;) # line end type ## [1] &quot;round&quot; par(&quot;ljoin&quot;) # line join style ## [1] &quot;round&quot; par(&quot;lmitre&quot;) # detail to ljoin option &quot;mitre&quot; ## [1] 10 18.1.11 Text par(&quot;font&quot;) # text font ## [1] 1 par(&quot;family&quot;) # text font family ## [1] &quot;&quot; par(&quot;cex&quot;) # magnifies text/symbols relative to default ## [1] 1 par(&quot;ps&quot;) # text pointsize ## [1] 12 par(&quot;col&quot;) # text color ## [1] &quot;black&quot; par(&quot;srt&quot;) # string rotation in degrees (°) ## [1] 0 par(&quot;lheight&quot;) # vertical spacing in multi-line text ## [1] 1 Point size of text = ps * cex Point size of title = ps * cex * cex.main Size of “lines” (coordinate system) = constant * cex * mex Get new text families with packet extrafont (see here) You could also use this command to get your fonts from Windows windowsFonts(MyFont = windowsFont(\"NameFromWord\")), however with this way the new font cannot be printed to PDF. 18.1.12 Axis labels par(&quot;font.lab&quot;) ## [1] 1 par(&quot;cex.lab&quot;) ## [1] 1 par(&quot;col.lab&quot;) ## [1] &quot;black&quot; par(&quot;ann&quot;) # should there be any annotations (title, axis title) ## [1] TRUE par(&quot;adj&quot;) # axis title position (0: left, 1: right) ## [1] 0.5 par(&quot;mgp&quot;) # position of 1) labels, 2) tick-mark labels, 3) tick marks (in lines) ## [1] 3 1 0 18.1.13 Axis par(&quot;font.axis&quot;) ## [1] 1 par(&quot;cex.axis&quot;) ## [1] 1 par(&quot;col.axis&quot;) ## [1] &quot;black&quot; par(&quot;xaxt&quot;) # should there be an axis (&quot;n&quot; suppresses axis) ## [1] &quot;s&quot; par(&quot;las&quot;) # orientation of tick-mark labels (0: parallel, 1: horizontal, 2: perpendicular, 3: vertical) ## [1] 0 par(&quot;mgp&quot;) # position of 1) labels, 2) tick-mark labels, 3) tick marks (in lines) ## [1] 3 1 0 18.1.14 Ticks par(&quot;mgp&quot;) # position of 1) labels, 2) tick-mark labels, 3) tick marks (in lines) ## [1] 3 1 0 par(&quot;tck&quot;) # length of tick marks (in npc), 1 =&gt; grid lines ## [1] NA par(&quot;tcl&quot;) # length of tick marks (in chars), negative =&gt; look outside plot ## [1] -0.5 par(&quot;lab&quot;) # ≈ number of ticks per axis (x-axis, y-axis, unimplementent) ## [1] 5 5 7 par(&quot;xaxp&quot;) # look where ticks are plotted (lower xlim, upper xlim, nr of ticks minus 1) ## [1] 0 1 5 par(&quot;xaxs&quot;) # &quot;r&quot;: xlim +/- 4%, &quot;i&quot;: xlim ## [1] &quot;r&quot; par(&quot;xlog&quot;) # log x axis ## [1] FALSE 18.1.15 Box par(&quot;bty&quot;) # one of &quot;o&quot;, &quot;l&quot;, &quot;7&quot;, &quot;c&quot;, &quot;u&quot;, &quot;]&quot;, no box: &quot;n&quot; ## [1] &quot;o&quot; 18.1.16 Title par(&quot;font.main&quot;) ## [1] 2 par(&quot;cex.main&quot;) ## [1] 1.2 par(&quot;col.main&quot;) ## [1] &quot;black&quot; par(&quot;font.sub&quot;) ## [1] 1 par(&quot;cex.sub&quot;) ## [1] 1 par(&quot;col.sub&quot;) ## [1] &quot;black&quot; par(&quot;ann&quot;) # should there be any annotations (title, axis title) ## [1] TRUE 18.1.17 R.O. (Read only) par(&quot;cin&quot;) # character size (width, height) in inches ## [1] 0.15 0.20 par(&quot;cra&quot;) # character size (width, height) in pixels ## [1] 28.8 38.4 par(&quot;csi&quot;) # same as par(&quot;cin&quot;)[2] ## [1] 0.2 par(&quot;cxy&quot;) # character size (width, height) in user coordinate system ## [1] 0.02604167 0.06329115 par(&quot;din&quot;) # device dimensions (width, height) in inches ## [1] 6.999999 4.999999 par(&quot;page&quot;) # A boolean value indicating whether the next call to plot.new is going to start a new page ## [1] TRUE 18.1.18 Useless par(&quot;crt&quot;) # rotate single characters, does NOT work on most devices. ## [1] 0 par(&quot;ylbias&quot;) # used in positioning of text in margin (no effect?) ## [1] 0.2 par(&quot;err&quot;) # unimplemented ## [1] 0 par(&quot;mkh&quot;) # unimplemented ## [1] 0.001 par(&quot;smo&quot;) # unimplemented ## [1] 1 18.2 Graphics Size and Resolution 18.2.1 Terminology Point (typography) Unit of length in typography. 1 point = \\(1/72\\) inch \\(\\approx\\) 0.353 mm. Typically, font size and size of spaces are defined in unit “pointsize” Pixels per inch (ppi) measurement of pixel density 18.2.2 Devices pdf() width/height By default 7 inches Are always specified in inches. No unit argument. To specify in cm use function cm() which converts from cm to inches. No resolution argument necessary (vector graphic) png() width/height By default 480 units (by default pixels) unit argument changes unit (px, in, cm, mm) Resolution: See below 18.2.3 Resolution and Font Size with png Depends if height/width is specified in pixels or in length unit = \"px\" (NOT recommended) res by default 72 ppi if not specified otherwise pixels \\(\\xrightarrow{\\text{ppi}}\\) inches Changing res will also change the font size (relative to image dimensions)! Reason: pointsize is defined in inches and inches are defined via ppi. height/width not specified in pixels res has to be specified (NO default value) pixels \\(\\xleftarrow{\\text{ppi}}\\) inches Changing the res has no effect on font size (relative to image dimensions) # default: width = 480, height = 480, units = &quot;px&quot;, pointsize = 12, res = 72 png(&quot;TestPlot.png&quot;) plot(1:10) dev.off() # change only `res` png(&quot;TestPlot.png&quot;, res = 30) plot(1:10) dev.off() ## font size (relative to image dimensions) very small now png(&quot;TestPlot.png&quot;, width = 17, height = 17, units = &quot;cm&quot;, res = 200) plot(1:10) dev.off() ## now the font size is defined relative to the image dimensions ## Changing the `res` will not change the font size png(&quot;TestPlot.png&quot;, width = 17, height = 17, units = &quot;cm&quot;, res = 300) plot(1:10) dev.off() ## you can still change the font size with the argument `pointsize` png(&quot;TestPlot.png&quot;, width = 17, height = 17, units = &quot;cm&quot;, res = 300, pointsize = 24) plot(1:10) dev.off() 18.3 Colors Very well explained here Specify by: Name example col = \"black\" possible names: colors() Hexadecimal RGB code example col = \"#000000\" =&gt; black format \"#RRGGBB\" RR, GG, BB are hexadecimal digits (00 to FF) Index example col = 1 =&gt; black index gives colors position in palette() palette() can be manipulated restore default palette with palette(\"default\") Special: index 0 is background color Default palette: Change palette mycols &lt;- gray.colors(n = 4, start = 0, end = 0.8) palette(mycols) # change palette plot(..., col = 1:4) # make plots using indices for colors palette(&quot;default&quot;) # restore default palette 18.3.1 Convert from/to different color specification RGB rgb() converts RGB to hexadecimal col2rgb() converts R colors (hexadecimal, name, index) to RGB HSV hsv() converts HSV to hexadecimal HCL hcl() converts HCL to hexadecimal 18.3.2 Make new palettes Create a vector of \\(n\\) continuous colors. All of them (except for gray.colors) have additionally an argument alpha for transparency. gray.colors(n) heat.colors(n) cm.colors(n) terrain.colors(n) topo.colors(n) rainbow(n) Further palettes hcl.colors many different palettes implemented (including famous “viridis” palette) hsv() / hcl() fix 2 parameters and let one parameter continuously increase 18.3.3 Partially transparent colors Add two more digits to hexadecimal code, which define transparency #RRGGBBaa Use adjustcolor() function Alternative: ggplot2::alpha() plot(..., col = adjustcolor(&quot;gray&quot;, alpha.f = 0.5)) 18.4 Mathematical annotation Useful helpfile: Mathematical annotation in R If the text argument to one of the text-drawing functions (text, mtext, axis, legend, title) in R is an expression, the argument is interpreted as a mathematical expression and the output will be formatted according to TeX-like rules. Functions to create objects of mode “expression” expression() bquote() same as expression() but variables/terms wrapped in .() are evaluated Importand special symbols in expressions * connects two parts without a space ~ connects two parts with space ^ superscript [] subscript An extensive overview can be found in the following tables. The columns of grey text show sample R expressions, and the columns of black text show the resulting output. Example a &lt;- 1.34 label1 &lt;- bquote(R[adj]^2 == ~ .(a) ~ &quot;[&quot; * mu * mol %.% s^-1 %.% m^-2 * &quot;]&quot; %=&gt;% supi ~ hat(x) ~ sum(x[i], i == 1, n)) par(mar = c(0,0,0,0)+0.5) plot(1, type = &quot;n&quot;) text(1,1, labels = label1, cex = 1.5) 18.5 High level plots Links: R Graph Gallery Simple graphs 3D plots Common high level plot functions 1D continuous curve() hist() stripchart() dotchart() beeswarm::beeswarm() 1D discrete barplot() spineplot() pie() 2D continuous - continuous plot.default() scatter.smooth() matplot() pairs() 2D continuous - discrete boxplot() stripchart() dotchart() barplot() beeswarm::beeswarm() spineplot() pie() 2D discrete - discrete mosaicplot() / vcd::mosaic() 3D contour() filled.contour() image() persp() rgl::plot3d() ANOVA interaction.plot() plot.design() Multivariate pairs() GGally::ggpairs() Bubble Plot coplot() stars() mosaicplot() Distribution qqplot() Interactive identify() plot.ly (interactive plots) shiny (interactive web apps) 18.5.1 Plot function Type argument For pmf use type = \"h\" and for cdf use type = \"s\" 18.5.2 Example: Barplot myData &lt;- aggregate(mtcars$mpg, by = list(cyl = mtcars$cyl, gears = mtcars$gear), FUN = function(x) c(mean = mean(x), sd = sd(x), n = length(x))) myData &lt;- do.call(data.frame, myData) myData$se &lt;- myData$x.sd / sqrt(myData$x.n) colnames(myData) &lt;- c(&quot;cyl&quot;, &quot;gears&quot;, &quot;mean&quot;, &quot;sd&quot;, &quot;n&quot;, &quot;se&quot;) myData$names &lt;- c(paste(myData$cyl, &quot;cyl /&quot;, myData$gears, &quot; gear&quot;)) par(mar = c(5, 6, 4, 5) + 0.1) plotTop &lt;- max(myData$mean) + myData[myData$mean == max(myData$mean), 6] * 3 barCenters &lt;- barplot(height = myData$mean, names.arg = myData$names, beside = true, las = 2, ylim = c(0, plotTop), cex.names = 0.75, xaxt = &quot;n&quot;, main = &quot;barplot()&quot;, ylab = &quot;Miles per Gallon&quot;, border = &quot;black&quot;, axes = TRUE) text(x = barCenters, y = par(&quot;usr&quot;)[3] - 1, srt = 45, adj = 1, labels = myData$names, xpd = TRUE) arrows(barCenters, myData$mean - myData$se, barCenters, myData$mean + myData$se, lwd = 1.5, angle = 90, code = 3, length = 0.05) 18.5.3 Example: Matplot den.df &lt;- 2:20 num.df &lt;- 2:20 mq &lt;- matrix(0, nrow = length(den.df), ncol = length(num.df)) for(i in seq_along(den.df)){ mq[i,] &lt;- qf(0.95, num.df, den.df[i]) } ## den.df: x coordinates of lines (recycled in this case) ## mq: y coordinates of lines, here: matrix ## each column give y coordinate of one line matplot(den.df, mq, type = &quot;l&quot;, xlab = &quot;den.df&quot;, ylab = &quot;95%-quantile&quot;) 18.5.4 Example: image and contour plot Be careful with image() and contour(). There are different conventions for mapping the matrix indices \\((i, j)\\) to the spatial coordinates \\((x, y)\\). Cartesian convention matrix is transposed rows of matrix end up on x axis columns on y axis columns are flipped (first column is at bottom) European reading order Matrix plotted as it would also be written down For details see Baddeley, Rubak, and Turner (2016, chap. 3.6.3) (m &lt;- matrix(1:6, 3, 2)) ## [,1] [,2] ## [1,] 1 4 ## [2,] 2 5 ## [3,] 3 6 image(z = m) text(x = rep(0:2/2, 2), y = rep(0:1, each = 3)) contour(z = m, levels = 1:6, add = TRUE) For European reading order first rotate matrix using t(m[nrow(m):1,,drop=FALSE]) (see here) image(t(m[nrow(m):1,,drop=FALSE])) text(x = rep(0:1, each = 3), y = rep(2:0/2, 2)) or use heatmap() heatmap(x = m, Rowv = NA, Colv = NA, revC = TRUE, asp = 1, scale = &quot;none&quot;) Example: visualize polynomial regression model with two predictors library(MASS) fit &lt;- lm(loss ~ tens + I(hard * tens) + I(hard^2) + I(tens^2) + I(hard^2 * tens) + I(tens^3) + I(hard^3), data = Rubber) reso &lt;- 100 x1_range &lt;- range(Rubber$hard) x2_range &lt;- range(Rubber$tens) x1 &lt;- seq(x1_range[1], x1_range[2], length.out = 100) x2 &lt;- seq(x2_range[1], x2_range[2], length.out = 100) grid &lt;- expand.grid(hard = x1, tens = x2) grid$y &lt;- predict(object = fit, newdata = grid) image(x = x1, y = x2, z = matrix(grid$y, reso, reso)) contour(x = x1, y = x2, z = matrix(grid$y, reso, reso), xlab = &quot;&quot;, add = TRUE) ## easier lattice::contourplot() allows formula method (no matrix necessary) lattice::contourplot(y ~ hard + tens, data = grid, main = &quot;lattice::contourplot()&quot;) 18.5.5 Example: Boxplot Separately give data points for each box set.seed(1) boxplot(rnorm(10, 4), rnorm(10, 6), rnorm(10, 9)) Specify assignment to box with formula set.seed(1) dat &lt;- data.frame(y = rnorm(100), x = sample(c(&quot;a&quot;,&quot;b&quot;), size = 100, replace = TRUE)) boxplot(y ~ x, data = dat) 18.6 Low level plots Points -points() Lines lines() (connect several points) segments() (connect pairs of points) arrows() curve() abline() Bodies rect() polygon() symbols() Text text() mtext() legend() title() Plot elements axis() box() Add-ons grid() grid behind plot rug() small ticks at bottom of e.g. hist() axis.break() plotrix::axis.break() break of axis Useful function for text: strwidth(). Returns width or height of strings in user coordinates. 18.6.1 Legends 18.6.2 Arrow arrows(x0, y0, x1 = x0, y1 = y0, length = 0.25, angle = 30, code = 2) 18.6.3 panel.first plot something behind actual plot plot(1:10,1:10, pch = 16, panel.first = abline(h = seq(2,10,2), col = &quot;lightgray&quot;)) 18.6.4 Area under curve x &lt;- seq(-4,4,0.01) y &lt;- dnorm(x) plot(y ~ x, type = &quot;l&quot;) upper_bond &lt;- 4 lower_bond &lt;- 2 auswahl &lt;- x &lt;= upper_bond &amp; x &gt;= lower_bond x_polygon &lt;- x[auswahl] y_polygon &lt;- y[auswahl] polygon(c(lower_bond, x_polygon, upper_bond), c(0, y_polygon, 0), col = &quot;red&quot;, border = NA) abline(h = 0) abline(v = 2) 18.7 Plot Math Coordinate System mathplot &lt;- function(xlim = c(0,1), ylim = c(0,1), xlab = &quot;x&quot;, ylab = &quot;y&quot;){ opar &lt;- par(xaxs = &quot;i&quot;, yaxs = &quot;i&quot;) # no +- 4% plot.new() plot.window(xlim = xlim, ylim = ylim) u &lt;- par(&quot;usr&quot;) shape::Arrows(u[1], u[3], u[2], u[3], arr.adj = 1, xpd = TRUE) shape::Arrows(u[1], u[3], u[1], u[4], arr.adj = 1, xpd = TRUE) shape::Arrows(u[1], u[3], u[2], u[3], arr.adj = 1, xpd = TRUE) shape::Arrows(u[1], u[3], u[1], u[4], arr.adj = 1, xpd = TRUE) mtext(text = xlab, side = 1, line = 1, adj = 1) mtext(text = ylab, side = 2, line = 1, adj = 1) par(opar) } mathplot() 18.8 Plot empty Plot without axis/box par( ann = FALSE # no titles , bty = &quot;n&quot; # no box , xaxt = &quot;n&quot; # no x axis , yaxt = &quot;n&quot; # no y axis ) Plot empty # Perfect plot.new() plot.window(xlim = ..., ylim = ...) # Good plot(0, type = &quot;n&quot;, axes = FALSE, ann = FALSE) References "],["interactive-plots.html", "Chapter 19 Interactive Plots", " Chapter 19 Interactive Plots Overview of the R plot implementations ggplot2 book HTML Widgets framework http://www.htmlwidgets.org Do not need live R session Interactivity comes from the client side (via JavaScript in the web browser) many packages built on top of that (e.g. leaflet) plotly javascript visualisation toolkit Shiny framework Easy but rely on a live R session Interactivity from the provider (server with running R session) "],["ggplot2.html", "Chapter 20 ggplot2 20.1 R Base Graphics vs ggplot2 20.2 Syntax 20.3 Aesthetic mappings aes 20.4 Goemetric objects geoms 20.5 Statistical transformations stat 20.6 Combine base graphics and ggplot2", " Chapter 20 ggplot2 20.1 R Base Graphics vs ggplot2 R base graphics Based on packages grapics and grDevices Application Graphical parameters are set with the function par() High level plot functions create new plot Low level plot functions add elements Concept Every plotting function directly prints to the output device What is printed cannot be deleted You can only print on top of an existing plot ggplot2 Based on package ggplot2 Concept Write a program (saved in a gg object) that can later be used to create the plot in one step The whole plot is saved in a single object ggplot() creates the gg object +.gg() adds layers to an existing gg object 20.2 Syntax Reference page Overall structure ggplot(data = &lt;DATA&gt;) + &lt;GEOM_FUNCTION&gt;(mapping = aes(&lt;MAPPINGS&gt;)) Detailed structure ggplot(data = &lt;DATA&gt;) + &lt;GEOM_FUNCTION&gt;( mapping = aes(&lt;MAPPINGS&gt;), stat = &lt;STAT&gt;, position = &lt;POSITION&gt; ) + &lt;COORDINATE_FUNCTION&gt; + &lt;FACET_FUNCTION&gt; ggplot() creates a coordinate system where you can add layers geom_point() scatterplot layer 20.3 Aesthetic mappings aes aes: variable =&gt; visual properties x x-axis y y-axis color color of points alpha transparency of points fill fill color if shape 21:25 shape shape of points size size of points stroke lwd of line arround point Only visual properties which map a variable are in aes(). Visual properties which affect all points are outsied (example below: col is outside because it affects all points). require(ggplot2) ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), col = &quot;blue&quot;) facet_wrap() split plot according to factor facet_grid() split plot according to 2 factors 20.4 Goemetric objects geoms geom: geometrical object that a plot uses to represent data. Examples: geom_point() geom_line() geom_boxplot() geom_histogram() 20.5 Statistical transformations stat stat: algorithm to calculate new values for a graph Check default value of stat argument in each geom 20.6 Combine base graphics and ggplot2 Very difficult to combine output of both Usually you have to decide for one of both Possible help Package gridBase helps to combine grid (also ggplot2) and base graphics output Vignette ggthemes::theme_base allows for ggplot output with the base graphics design "],["text-output.html", "Chapter 21 Text output 21.1 Format 21.2 New lines 21.3 Print text to console 21.4 Combine Text and variables", " Chapter 21 Text output 21.1 Format Always and exactly 2 places after comma x &lt;- 0.1234567 format(round(x, 2), nsmall = 2) ## [1] &quot;0.12&quot; 21.2 New lines Plot text with line break par(mar = c(0,0,0,0)+0.5) plot(1, type = &quot;n&quot;) text(1,1, labels = &quot;text \\n and more text&quot;) 21.3 Print text to console Main functions print() cat() message() warning() stop() write() See this excellent post on Stack Overflow Details print() Arguments are not pasted together Elements are numbered like [1] Quotation mark around strings cat() Arguments are pasted together (default: sep = \" \") You have to force new lines with \\n Most generic print.*() functions use cat() or mixture of print.default() and cat() (see for example getAnywhere(print.lm) message() Arguments are pasted together (default: sep = \"\") Output not sent to stdout (standard output) but to stderr (standard error) Printed in red color can be suppressed and caught with e.g. supressMessages(), tryCatch(), … 21.4 Combine Text and variables paste() cat() format() sprintf() glue::glue() cat(&quot;pi is given by&quot;, format(pi, digits = 3)) ## pi is given by 3.14 sprintf(&quot;pi is given by %.2f&quot;, pi) ## [1] &quot;pi is given by 3.14&quot; glue::glue(&quot;pi is given by {pi}&quot;) ## pi is given by 3.14159265358979 "],["topics.html", "Chapter 22 Topics", " Chapter 22 Topics Basic statistics PDF/PMF, CDF, distributions, Probability, E(), Var(), -… Likelihood inference Bayes Regression ANOVA Mixed Models Multivariate Statistics Time Series Computational Statistics Nonparametric Resampling Bootstrap ML "],["basic-statistics.html", "Chapter 23 Basic Statistics 23.1 Distributions", " Chapter 23 Basic Statistics 23.1 Distributions d Density (pdf, pmf) p Probability (cdf) q Quantile (quantile function) r Random sampling Continuous dbeta Beta dbinom Binomial dcauchy Cauchy dchisq Chi-Square dexp Exponential df F dgamma Gamma dgeom Geometric dhyper Hypergeometric dlogis Logistic dlnorm Log Normal dnbinom Negative Binomial dnorm Normal dpois Poisson dt Student t dtukey Studentized Range dunif Uniform dweibull Weibull dwilcox Wilcoxon Rank Sum Statistic dsignrank Wilcoxon Signed Rank Statistic Discrete dbinom Binomial dgeom Geometric dhyper Hypergeometric dbinom Negative Binomial dpois Poisson 23.1.1 Relationships between distributions \\[ \\text{Standard Norm}:\\quad Z \\] \\[ \\chi_n^2:\\quad X = (Z_1^2 + Z_2^2 + \\cdot + Z_n^2)/n \\] \\[ F_{n,m}:\\quad F = \\frac{X_n^2}{X_m^2} \\] \\[ t_m:\\quad \\frac{Z}{\\sqrt{\\frac{X_m^2}{m}}} \\] Cauchy: Special case of \\(t\\) distribution "],["regression.html", "Chapter 24 Regression 24.1 Preperation 24.2 Fit 24.3 Inference 24.4 Prediction 24.5 Plot regression 24.6 Model comparison 24.7 Diagnostic plots 24.8 Model improvement 24.9 Shrinkage 24.10 Smoothing 24.11 GAM 24.12 GLM", " Chapter 24 Regression Load data sets of this chapter data(&quot;apm&quot;, package = &quot;DataRZ&quot;) data(&quot;unique2010&quot;, package = &quot;DataRZ&quot;) data(&quot;baby&quot;, package = &quot;DataRZ&quot;) data(&quot;iris&quot;) data(&quot;Leinhardt&quot;, package = &quot;carData&quot;) data(&quot;Prestige&quot;, package = &quot;carData&quot;) data(&quot;gala&quot;, package = &quot;faraway&quot;) 24.1 Preperation Plot predictors library(FunRZ) pairs(iris, lower.panel = panel.smooth, diag.panel = panel.hist, upper.panel = panel.cor) Transform and check for NA any(is.na(iris$Sepal.length)) iris$log_sepal &lt;- log(iris$Sepal.length) 24.2 Fit lm() fit linear model Extract values residuals() raw residuals rstandard() standardized residuals rstudent() studentized residuals sigma() residual standard deviation \\(\\sigma_E\\) (alternative summary(fit)$sigma) 24.3 Inference summary() estimates, std. error, p values, multiple R-squared confint() CI fit &lt;- lm(Pax ~ ATM, data = unique2010) Automatic testing \\(H_0: \\beta_j = 0\\) summary(fit) ## ## Call: ## lm(formula = Pax ~ ATM, data = unique2010) ## ## Residuals: ## Min 1Q Median 3Q Max ## -104188 -40885 2099 48588 89154 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -1.198e+06 1.524e+05 -7.858 7.94e-08 *** ## ATM 1.388e+02 6.878e+00 20.176 1.11e-15 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 59700 on 22 degrees of freedom ## Multiple R-squared: 0.9487, Adjusted R-squared: 0.9464 ## F-statistic: 407.1 on 1 and 22 DF, p-value: 1.11e-15 Manual testing \\(H_0: \\beta_j = b\\) b &lt;- 5 # for example mycoef &lt;- summary(fit)$coefficients t_val &lt;- (mycoef[&quot;(Intercept)&quot;,&quot;Estimate&quot;]-b)/mycoef[&quot;(Intercept)&quot;,&quot;Std. Error&quot;] (1-pt(abs(t_val), df))*2 ## df = degrees of freedom of residuals (find in summary) ## *2 two sided test Automatic CI confint(fit, &quot;ATM&quot;) confint(fit, &quot;(Intercept)&quot;) Manual CI mycoef &lt;- summary(fit)$coefficients mycoef[&quot;(Intercept)&quot;,&quot;Estimate&quot;] + qt(c(0.025,0.975), df)*mycoef[&quot;(Intercept)&quot;,&quot;Std. Error&quot;] ## df = degrees of freedom of residuals 24.4 Prediction fitted() fitted values predict() predict for any predictor value newdata needs to be a data.frame with same colomn name as predictors ## Predict values for any predictor values dat &lt;- data.frame(ATM=c(24000)) predict(fit, newdata=dat) ## 1 ## 2132598 ## CI for regression line dat &lt;- data.frame(ATM=seq(18000, 26000, length=200)) ci &lt;- predict(fit, newdata=dat, interval=&quot;confidence&quot;) ## PI for regression line dat &lt;- data.frame(ATM=seq(18000, 26000, length=200)) pi &lt;- predict(fit, newdata=dat, interval=&quot;prediction&quot;) 24.5 Plot regression Include regression formula set.seed(1) x &lt;- rnorm(50, mean = 10, sd = 2) y &lt;- x + rnorm(50, sd = 2) plot(y ~ x) fit &lt;- lm(y ~ x) abline(fit) x_cor &lt;- grconvertX(0.1, from = &#39;npc&#39;) y_cor &lt;- grconvertY(0.9, from = &#39;npc&#39;) fit_eq &lt;- format(coef(fit), digits = 2) fit_r_sq &lt;- format(summary(fit)$adj.r.squared, digits = 2) fit_cor &lt;- format(cor(x = x, y = y), digits = 2) text(x = x_cor, y = y_cor, pos = 4, labels = bquote(y == .(fit_eq[2]) * x + .(fit_eq[1]))) text(x = x_cor, y = y_cor-1, pos = 4, labels = bquote(R[adj]^2 == .(fit_r_sq))) text(x = x_cor, y = y_cor-2, pos = 4, labels = bquote(cor == .(fit_cor))) Include CI and PI fit &lt;- lm(Pax ~ ATM, data = unique2010) dat &lt;- data.frame(ATM=seq(18000, 26000, length=200)) ci &lt;- predict(fit, newdata=dat, interval=&quot;confidence&quot;) pi &lt;- predict(fit, newdata=dat, interval=&quot;prediction&quot;) plot(Pax ~ ATM, data=unique2010, pch=20) lines(dat$ATM, ci[,2], col=&quot;green&quot;) lines(dat$ATM, ci[,3], col=&quot;green&quot;) lines(dat$ATM, pi[,2], col=&quot;blue&quot;) lines(dat$ATM, pi[,3], col=&quot;blue&quot;) abline(fit, col=&quot;red&quot;, lwd=2) Regression line with log transformation fit &lt;- lm(log(infant) ~ log(income), data = Leinhardt) plot(infant ~ income, data = Leinhardt) my_pre &lt;- data.frame(income = seq(min(Leinhardt$income), max(Leinhardt$income), length.out = 200)) my_pre$infant &lt;- exp(predict(fit, newdata = my_pre)) lines(my_pre$income, my_pre$infant) 24.6 Model comparison Gobal F-test summary() Partial F-test anova() perfect but both models need to be specified significance means evidence against the simpler model drop1() drops only single terms correctly handles factors/interactions no testing of single factor levels (factor as a whole is tested) hirarchical structure is considered (first drop interaction before droping main factor) summary() drops only single parameters wrong handling of factors/interactions 24.7 Diagnostic plots 24.7.1 Tukey-Anscombe plot # Automatic plot(fit, which = 1) # Manual plot(fitted(fit), residuals(fit)) abline(h = 0) lines(loess.smooth(fitted(fit), residuals(fit)), col = &quot;red&quot;) # Resampling FunRZ::FunResplot(fit, plot = 1) 24.7.2 Normal QQ plot # Automatic plot(fit, which = 2) # Manual qqnorm(rstandard(fit)) qqline(rstandard(fit)) # Resampling FunRZ::FunResplot(fit, plot = 2) 24.7.3 Scale-Location plot # Automatic plot(fit, which = 3) # Manual res &lt;- sqrt(abs((rstandard(fit)))) plot(fitted(fit), res) lines(loess.smooth(fitted(fit), res), col=&quot;red&quot;) # Resampling FunRZ::FunResplot(fit, plot = 3) 24.7.4 Leverage plot # Automatic plot(fit, which = 4) 24.7.5 Residuals vs any # vs Predictors plot(residuals(fit) ~ ., data = df) # vs Possible predictors plot(residuals(fit) ~ ., data = df) # vs Temporal/Spatial information plot(residuals(fit)) ## against Index plot(residuals(fit) ~ Time-Space-Variable) 24.7.6 Partial residual plot # Automatic car::crPlots(fit) car::crPlot(fit, variable = x1) # Manual myres &lt;- residuals(fit, type = &quot;partial&quot;) mycof &lt;- fit$coefficients ## for target variable x1 plot(myres[,&quot;x1&quot;] ~ x1) abline(a = -mycof[&quot;x1&quot;]*mean(x1), b = mycof[&quot;x1&quot;]) lines(loess.smooth(x1, myres[,&quot;x1&quot;]), col = &quot;red&quot;) 24.8 Model improvement 24.8.1 Multicollinearity The variance inflation factor \\(\\text{VIF}\\) quantifies the multicollinearity between predictor variables. Fit contains only numerical predictors: \\(\\text{VIF} &gt; 5\\) critically Fit contains also factorial predictors (with &gt; 2 levels): GVIF^(1/(2*Df)) \\(&gt; 5\\) critically ## Only numerical predictors fit &lt;- lm(Pax ~ ATM + Cargo, data = unique2010) car::vif(fit) ## ATM Cargo ## 1.052416 1.052416 ## Contains fatorial predictor fit &lt;- lm(Sepal.Length ~ Sepal.Width + Species, data = iris) car::vif(fit) ## GVIF Df GVIF^(1/(2*Df)) ## Sepal.Width 1.668844 1 1.291837 ## Species 1.668844 2 1.136590 24.8.2 AIC/BIC \\[\\begin{align*} \\text{AIC} &amp;= -2\\log(\\text{L}) + 2p \\\\ \\text{BIC} &amp;= -2\\log(\\text{L}) + \\log(n)p \\end{align*}\\] where \\(\\log(\\text{L})\\) is the log likelihood, \\(p\\) is the number of estimated parameters and \\(n\\) is the number of observations. AIC() Akaike information criterion BIC() Bayesian information criterion Interpretation Smaller is better BIC usually stronger penalization for numbers of parameters Evidence (\\(\\Delta \\text{AIC}\\), \\(\\Delta \\text{BIC}\\)) 0-2 Weak 2-6 Positive 6-10 Strong &gt; 10 Very strong 24.8.3 Variable selection 24.8.3.1 Backward elimination ## Manual fit01 &lt;- lm(Mortality ~ JanTemp + JulyTemp + RelHum + Rain + Educ + Dens + NonWhite + WhiteCollar + log(Pop) + House + Income + log(HC) + log(NOx) + log(SO2), data=apm) # full model drop1(fit01, test = &quot;F&quot;) fit02 &lt;- update(fit, .~. – House ) # remove predictor with highest p-value / highest AIC/BIC drop1(fit02, test = &quot;F&quot;) # ... ## Automatic fit01 &lt;- lm(Mortality ~ JanTemp + JulyTemp + RelHum + Rain + Educ + Dens + NonWhite + WhiteCollar + log(Pop) + House + Income + log(HC) + log(NOx) + log(SO2), data=apm) fit02 &lt;- step(fit01, direction = &quot;backward&quot;, k = 2) # k defines selection criterion (AIC, BIC) 24.8.3.2 Forward selection ## Manual fit01 &lt;- lm(Mortality ~ 1, data = apm) f_full &lt;- lm(Mortality ~ JanTemp + JulyTemp + RelHum + Rain + Educ + Dens + NonWhite + WhiteCollar + log(Pop) + House + Income + log(HC) + log(NOx) + log(SO2), data=apm) add1(fit01, scope = f_full, test = &quot;F&quot;) fit02 &lt;- update(fit01, .~. + NonWhite ) # add predictor with lowest p-value / lowest AIC/BIC add1(fit02, scope = f_full, test = &quot;F&quot;) # ... ## Automatic f_full &lt;- lm(Mortality ~ JanTemp + JulyTemp + RelHum + Rain + Educ + Dens + NonWhite + WhiteCollar + log(Pop) + House + Income + log(HC) + log(NOx) + log(SO2), data=apm) f_null &lt;- lm(Mortality ~ 1, data = apm) sc &lt;- list(lower = f_null, upper = f_full) fit02 &lt;- step(f_null, scope = sc, direction = &quot;forward&quot;, k = 2) # k defines selection criterion (AIC, BIC) 24.8.3.3 Both directions f_full &lt;- lm(Mortality ~ JanTemp + JulyTemp + RelHum + Rain + Educ + Dens + NonWhite + WhiteCollar + log(Pop) + House + Income + log(HC) + log(NOx) + log(SO2), data=apm) fit02 &lt;- step(f_full, direction = &quot;both&quot;, k = 2) # k defines selection criterion (AIC, BIC) 24.8.3.4 All possible models f_full &lt;- lm(Mortality ~ JanTemp + JulyTemp + RelHum + Rain + Educ + Dens + NonWhite + WhiteCollar + log(Pop) + House + Income + log(HC) + log(NOx) + log(SO2), data=apm) fit02 &lt;- leaps::regsubsets(formula(f_full), nbest = 1, dat = apm, nvmax = 14) plot(fit02) # black predictors are included in the model leaps::regsubsets cannot deal correctly with factor variables and interaction terms (removes single factor levels instead of entire factor, removes main term even if interaction is still included) 24.8.3.5 Select model with lowest predictive MSE ## Automatic (not recommended) DAAG::CVlm(data, formula, fold.number, ...) ## Manual (this code only test one possible model) dat &lt;- apm # Randomly shuffle the data dat &lt;- dat[sample(nrow(dat)), ] # Create 10 equally size folds f &lt;- 10 folds &lt;- cut(seq(1, nrow(dat)), breaks = f, labels = FALSE) # Perform 10 fold cross validation SE &lt;- vector(&quot;numeric&quot;, f) for(i in 1:f){ #Segement your data by fold using the which() function testIndexes &lt;- which(folds==i,arr.ind=TRUE) testData &lt;- dat[testIndexes, ] trainData &lt;- dat[-testIndexes, ] #Use the test and train data partitions to check one model fit &lt;- lm(Mortality ~ NonWhite, data = trainData) pred &lt;- predict(fit, newdata = testData) SE[i] &lt;- mean((testData$Mortality - pred)^2) } mean(SE) 24.8.4 Predictor relevance significance \\(\\neq\\) relevance ## Standardized coefficients lelaimpo::calc.relim(fit, type = &quot;betasq&quot;, rela = TRUE) ## LMG criterion lelaimpo::calc.relim(fit, type = &quot;lmg&quot;, rela = TRUE) 24.9 Shrinkage See chapter 28 24.10 Smoothing 24.10.1 Running mean (yellow box) fit &lt;- ksmooth(unique2010$ATM,unique2010$Pax, # Data kernel = &quot;box&quot;, # weighting of points bandwidth = 1000, # spread of weighting function n.points = 24, # number of points which should be evaluated x.points = unique2010$ATM) # where they should be evaluated plot(unique2010$ATM, unique2010$Pax) lines(fit) \\[\\begin{align*} &amp;&amp; 0.25 \\cdot \\text{bandwith} &amp;= Q_{75\\%} \\\\ \\Rightarrow &amp;&amp; \\text{bandwith} &amp;= \\text{complete width of box} \\end{align*}\\] 24.10.2 Gaussian kernel estimate (green gaussian) fit &lt;- ksmooth(unique2010$ATM,unique2010$Pax, kernel = &quot;normal&quot;, bandwidth = 1000, n.points = 1000) plot(unique2010$ATM, unique2010$Pax) lines(fit) \\[\\begin{align*} &amp;&amp; P(X \\leq 0.25 \\cdot \\text{bandwith}) &amp;= 0.75 \\\\ \\Rightarrow &amp;&amp; P\\left(Z \\leq \\frac{0.25 \\cdot \\text{bandwith}}{\\sigma}\\right) &amp;= 0.75 \\\\ \\Rightarrow &amp;&amp; \\frac{0.25 \\cdot \\text{bandwith}}{\\sigma} &amp;= \\Phi^{-1}(0.75) \\\\ \\Rightarrow &amp;&amp; \\text{bandwith} &amp;= \\frac{\\Phi^{-1}(0.75)}{0.25}\\sigma \\end{align*}\\] 24.10.3 LOESS smoother smoo &lt;- loess.smooth(unique2010$ATM,unique2010$Pax, # Data span = 2/3, # smoothing parameter (smaller =&gt; smoother) degree = 1, # 1: local linear regr, 2: local polynomial regr family = &quot;symmetric&quot;) # &quot;symmetric&quot;: robust fitting, &quot;gaussian&quot;: least squares fitting plot(unique2010$ATM, unique2010$Pax) lines(fit) 24.11 GAM Use package mgcv and have a look into the book of Wood. mgcv::s() smooth spline mgcv::te() interaction between two predictors mgcv::ti() mgcv::t2() splines::ns() natural spline gam::lo() loess x &lt;- 1:30 y &lt;- rnorm(30)+10*sin(c(1:30)*0.2) plot(x, y) library(mgcv) fit &lt;- gam(y ~ s(x)) lines(x, fitted(fit)) summary(fit) ## ## Family: gaussian ## Link function: identity ## ## Formula: ## y ~ s(x) ## ## Parametric coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.2373 0.1850 1.283 0.212 ## ## Approximate significance of smooth terms: ## edf Ref.df F p-value ## s(x) 5.958 7.117 219.2 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## R-sq.(adj) = 0.982 Deviance explained = 98.6% ## GCV = 1.3369 Scale est. = 1.0268 n = 30 edf Empirical degrees of freedom Ref.df Alternative way to calculate df GCV Generalized cross validation score Deviance explained Equivalent to \\(R^2\\) Scale est. estimate of \\(\\sigma_E^2\\) Deviance explained: Equivalent to R2 (not adjusted) Scale est.: estimate of _^2 Options s(x1, bs = &quot;tp&quot;) # tp: thin plate, cr: cubic spline s(x1, df = 3) # prespecify the df (instead of determine it by CV) Diagnostics fit &lt;- gam(Mortality ~ s(Educ), data = apm) gam.check(fit) ## ## Method: GCV Optimizer: magic ## Smoothing parameter selection converged after 5 iterations. ## The RMS GCV score gradient at convergence was 0.0003494895 . ## The Hessian was positive definite. ## Model rank = 10 / 10 ## ## Basis dimension (k) checking results. Low p-value (k-index&lt;1) may ## indicate that k is too low, especially if edf is close to k&#39;. ## ## k&#39; edf k-index p-value ## s(Educ) 9.0 2.1 1.03 0.54 low p-value and k-index &lt; 1 indicate that actual fit might need more flexibility increase k-value manually gam(Mortality ~ s(Educ, k = 50), data = apm) Visualization ## Partial residual plot fit_gam &lt;- gam(prestige ~ s(income) + s(education), data = Prestige) plot(fit_gam, shade = T, residuals = T, main = &quot;GAM Partial Residual Plot&quot;, pch = 20) ## 3D plot (only with exactly two s() terms) vis.gam(fit_gam, theta = 45, phi = 30) # rotation arround vertical (theta) and horizontal (phi) axis ## Interaction spline fit_gam &lt;- gam(prestige ~ te(income, education), data = Prestige) plot(fit_gam) Model comparison fit_ols &lt;- lm(prestige ~ income + education, data = Prestige) fit_gam &lt;- gam(prestige ~ s(income) + s(education), data = Prestige) anova(fit_ols, fit_gam, test = &quot;Chisq&quot;) ## Analysis of Variance Table ## ## Model 1: prestige ~ income + education ## Model 2: prestige ~ s(income) + s(education) ## Res.Df RSS Df Sum of Sq Pr(&gt;Chi) ## 1 99.000 6038.9 ## 2 94.705 4585.0 4.2951 1453.9 6.783e-06 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 In our case clear evidence for the more complex GAM model. Alternatives smooth.spline() only one dimensional splines package gam package earth 24.12 GLM 24.12.1 Logistic Regression Fitting fit &lt;- glm(survival ~ log10(weight) + age, data = baby, family=binomial) Possible warning messages of fitting Warning message: glm.fit: algorithm did not converge Numerical optimization failed, coefficients are not trustworthy Warning message: glm.fit: fitted probabilities numerically 0 or 1 occured Perfect separation between binary response options, possible to continue… Inference summary() drop1() Both should yield in similar results. drop1() might be better suited for factorial predictors and interactions (drops only terms which can be dropped). summary(fit) ## ## Call: ## glm(formula = survival ~ log10(weight) + age, family = binomial, ## data = baby) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -2.2694 -0.7032 0.3813 0.6899 2.2186 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -42.81347 7.40864 -5.779 7.52e-09 *** ## log10(weight) 12.87954 2.72022 4.735 2.19e-06 *** ## age 0.15187 0.08857 1.715 0.0864 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 230.79 on 166 degrees of freedom ## Residual deviance: 158.56 on 164 degrees of freedom ## AIC: 164.56 ## ## Number of Fisher Scoring iterations: 5 drop1(fit, test = &quot;Chisq&quot;) ## Single term deletions ## ## Model: ## survival ~ log10(weight) + age ## Df Deviance AIC LRT Pr(&gt;Chi) ## &lt;none&gt; 158.56 164.56 ## log10(weight) 1 188.70 192.70 30.1382 4.023e-08 *** ## age 1 161.58 165.58 3.0182 0.08234 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 A p-value for a “global F-test” can be manually computed 1-pchisq(fit$null.deviance-fit$deviance, df=(fit$df.null-fit$df.res)) ## [1] 2.220446e-16 CI ## Automatic (slightly different (better) than manual CI) confint(fit, &quot;log10(weight)&quot;) ## 2.5 % 97.5 % ## 7.868942 18.592123 confint(fit, &quot;(Intercept)&quot;) ## 2.5 % 97.5 % ## -58.49314 -29.29536 ## Manual mycoef &lt;- summary(fit)$coefficients mycoef[&quot;(Intercept)&quot;,&quot;Estimate&quot;] + qnorm(c(0.025, 0.975))*mycoef[&quot;(Intercept)&quot;,&quot;Std. Error&quot;] ## [1] -57.33414 -28.29280 Coefficient of determination \\(R^2\\) fit_dev &lt;- fit$deviance fit_null &lt;- fit$null.deviance n &lt;- length(baby$weight) R_2 &lt;- (1-exp((fit_dev-fit_null)/n))/(1-exp(-fit_null/n)) Visualization ## Bernoulli probability lin_pred &lt;- predict(fit, type=&quot;link&quot;) ## linear predictor bern_prob &lt;- predict(fit, type=&quot;response&quot;) ## bernoulli probability plot(lin_pred, baby$survival, type=&quot;n&quot;, xlab=&quot;linear predictor&quot;) points(lin_pred[baby$survival==0], baby$survival[baby$survival==0], pch = 16, col = &quot;red&quot;) points(lin_pred[baby$survival==1], baby$survival[baby$survival==1], pch = 17) lines(sort(lin_pred), sort(bern_prob), lty=3) title(&quot;Survival vs. Linear Predictor&quot;) ## Predictor space (only if exactly two predictors) plot(age ~ weight, data=baby, type=&quot;n&quot;) points(age ~ weight, subset=(survival==0), data=baby, pch = 16, col = &quot;red&quot;) points(age ~ weight, subset=(survival==1), data=baby, pch = 17) title(&quot;Survival after Premature Birth&quot;) Diagnostics Different types of residuals resid(fit, type = &quot;pearson&quot;) resid(fit, type = &quot;deviance&quot;) Tukey-Anscombe plot should be done manually because we need a non-robust smoother xx &lt;- predict(fit, type=&quot;link&quot;) yy &lt;- residuals(fit, type=&quot;deviance&quot;) plot(xx, yy, pch=20, main=&quot;Tukey-Anscombe Plot&quot;) lines(loess.smooth(xx, yy, family=&quot;gaussian&quot;), col=&quot;red&quot;) abline(h=0, lty=3, col=&quot;grey&quot;) 24.12.2 Poisson Regression Fitting fit &lt;- glm(Species ~ log(Area) + log(Elevation) + log(Nearest) + I(log(Scruz+0.4)) + log(Adjacent), data = gala, family = poisson) Inference summary(fit) ## ## Call: ## glm(formula = Species ~ log(Area) + log(Elevation) + log(Nearest) + ## I(log(Scruz + 0.4)) + log(Adjacent), family = poisson, data = gala) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -5.4226 -2.7223 -0.4634 2.5587 8.3320 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 3.323245 0.286430 11.602 &lt; 2e-16 *** ## log(Area) 0.350370 0.018005 19.459 &lt; 2e-16 *** ## log(Elevation) 0.033108 0.057034 0.580 0.56158 ## log(Nearest) -0.040153 0.014071 -2.854 0.00432 ** ## I(log(Scruz + 0.4)) -0.035848 0.013207 -2.714 0.00664 ** ## log(Adjacent) -0.089452 0.006944 -12.882 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for poisson family taken to be 1) ## ## Null deviance: 3510.73 on 29 degrees of freedom ## Residual deviance: 359.94 on 24 degrees of freedom ## AIC: 532.77 ## ## Number of Fisher Scoring iterations: 5 Diagnostics Residuals should lie within range \\([-2, 2]\\), this would not be fulfilled in our example: xx &lt;- predict(fit, type=&quot;link&quot;) yy &lt;- resid(fit, type=&quot;pearson&quot;) plot(xx, yy, main=&quot;Tukey-Anscombe Plot&quot;, xlab = &quot;Linear Predictor&quot;, ylab = &quot;Pearson Residuals&quot;, ylim = c(-10, 10)) smoo &lt;- loess.smooth(xx, yy) abline(h=0, col=&quot;grey&quot;) abline(h = c(-2,2), col = &quot;gray&quot;, lty = 2) lines(smoo, col=&quot;red&quot;) "],["anova.html", "Chapter 25 ANOVA 25.1 Idea 25.2 Example 25.3 Simulate data 25.4 Visualization 25.5 Fit model 25.6 ANOVA table 25.7 Model comparison 25.8 Coefficients 25.9 Tests and CI for coeficients 25.10 Predict 25.11 Diagnostic plots 25.12 Contrasts 25.13 Multiple comparison 25.14 Designs 25.15 Power Analysis", " Chapter 25 ANOVA Load data sets of this chapter data(&quot;meat&quot;, package = &quot;DataRZ&quot;) data(&quot;snails&quot;, package = &quot;DataRZ&quot;) data(&quot;pine&quot;, package = &quot;DataRZ&quot;) data(&quot;cheddar&quot;, package = &quot;DataRZ&quot;) data(&quot;grasses&quot;, package = &quot;DataRZ&quot;) data(&quot;animals&quot;, package = &quot;DataRZ&quot;) data(&quot;trigly&quot;, package = &quot;DataRZ&quot;) data(&quot;ergoStool&quot;, package = &quot;DataRZ&quot;) data(&quot;Machines&quot;, package = &quot;DataRZ&quot;) data(&quot;cheese.data&quot;, package = &quot;DataRZ&quot;) data(&quot;dish&quot;, package = &quot;DataRZ&quot;) data(&quot;PlantGrowth&quot;) data(&quot;Pastes&quot;, package = &quot;lme4&quot;) data(&quot;oats&quot;, package = &quot;MASS&quot;) 25.1 Idea 25.2 Example fit &lt;- aov(Yield ~ Genotype + Block, data = data) anova(fit) #Anova table ## Analysis of Variance Table ## ## Response: Yield ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Genotype 1 4.00 4.00 25.00 0.1257 ## Block 1 1.00 1.00 6.25 0.2422 ## Residuals 1 0.16 0.16 coef(fit) #Effect of different Factors ## (Intercept) Genotype2 Blockb ## 6.5 -2.0 -1.0 predict(fit) #Predict the fixed effect ## 1 2 3 4 ## 6.5 5.5 4.5 3.5 residuals(fit) #Actual yield - predicted fixed effect ## 1 2 3 4 ## -0.2 0.2 0.2 -0.2 par(mfrow = c(2,2)) plot(fit) 25.3 Simulate data rep() seq() rnorm() factor() gl() expand.grid() Cross product combn() interaction() dput() if you have data set and want to generate it from code ## rep() with arguments times, each, length.out rep(1:2, times = 2) ## [1] 1 2 1 2 rep(1:2, each = 2) ## [1] 1 1 2 2 rep(1:2, length.out = 5) ## [1] 1 2 1 2 1 ## gl() is a shortcut for factor(rep()) gl(2,3, labels = c(&quot;Control&quot;, &quot;Treat&quot;)) ## [1] Control Control Control Treat Treat Treat ## Levels: Control Treat factor(rep(c(&quot;Control&quot;, &quot;Treat&quot;), each = 3)) # same output ## [1] Control Control Control Treat Treat Treat ## Levels: Control Treat ## expand.grid() and interaction() (df &lt;- expand.grid(Block = LETTERS[1:2], Treat = 1:3)) ## Block Treat ## 1 A 1 ## 2 B 1 ## 3 A 2 ## 4 B 2 ## 5 A 3 ## 6 B 3 interaction(df$Block, df$Treat) ## [1] A.1 B.1 A.2 B.2 A.3 B.3 ## Levels: A.1 B.1 A.2 B.2 A.3 B.3 ## combn() combn(1:4, 2) # Combinatorics: combine each element with every other element ## [,1] [,2] [,3] [,4] [,5] [,6] ## [1,] 1 1 1 2 2 3 ## [2,] 2 3 4 3 4 4 combn(1:3, 3) # Make all possible 3-fold combinations (4 choose 3 combinations) ## [,1] ## [1,] 1 ## [2,] 2 ## [3,] 3 Simulate unbalanced data library(tidyverse) expand_grid(fac1 = letters[1:2], fac2 = LETTERS[1:2]) %&gt;% mutate(count = c(1,2,3,1)) %&gt;% uncount(weights = count, .id = &quot;rep&quot;) ## # A tibble: 7 × 3 ## fac1 fac2 rep ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 a A 1 ## 2 a B 1 ## 3 a B 2 ## 4 b A 1 ## 5 b A 2 ## 6 b A 3 ## 7 b B 1 25.3.1 Randomization sample() agricolae::design.lsd() Lattin square design treat.ord &lt;- rep(c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;), each = 5) sample(treat.ord, replace = FALSE) ## [1] &quot;C&quot; &quot;B&quot; &quot;D&quot; &quot;A&quot; &quot;A&quot; &quot;B&quot; &quot;A&quot; &quot;B&quot; &quot;A&quot; &quot;D&quot; &quot;D&quot; &quot;A&quot; &quot;D&quot; &quot;C&quot; &quot;C&quot; &quot;B&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; ## [20] &quot;C&quot; 25.4 Visualization 25.4.1 Stripchart stripchart(weight ~ group, vertical = TRUE, data = PlantGrowth) library(ggplot2) ggplot(Pastes, aes (y = cask, x = strength)) + geom_point () + facet_grid (batch ~ .) 25.4.2 Boxplot boxplot(weight ~ group, data = PlantGrowth) 25.4.3 Interaction plot with(snails, interaction.plot(x.factor = density, trace.factor = season, response = y)) ggplot(Machines, aes (x = Machine, y = score, group = Worker, col = Worker)) + geom_point() + stat_summary(fun = mean, geom = &quot;line&quot;) 25.4.4 Summary plot plot.design(y ~ location + exposure, data = pine) 25.5 Fit model 25.5.1 Identifiability options(&quot;contrasts&quot;) # Default ## $contrasts ## unordered ordered ## &quot;contr.treatment&quot; &quot;contr.poly&quot; Unordered: Unordered factors (nominal scale) Ordered: Ordered factors (ordinal scale) options(contrasts = c(&quot;contr.treatment&quot;, &quot;contr.poly&quot;)) options(contrasts = c(&quot;contr.sum&quot;, &quot;contr.poly&quot;)) Name Side-constraint Interpretation of \\(\\mu\\) R weighted sum-to-zero \\[\\sum_{i=1}^g n_i \\alpha_i = 0\\] \\[\\mu = \\frac{1}{N} \\sum_{i=1}^g n_i \\mu_i\\] sum-to-zero \\[\\sum_{i=1}^g \\alpha_i = 0\\] \\[\\mu = \\frac{1}{g}\\sum_{i=1}^g\\mu_i\\] contr.sum reference group \\[\\alpha_1=0\\] \\[\\mu=\\mu_1\\] contr.treatment 25.5.2 Fitting # One way ANOVA fit &lt;- aov(weight ~ group, data = PlantGrowth) # Two way ANOVA fit.cheddar &lt;- aov(acids ~ R50 + R21, data = cheddar) # With subset of data fit.spring &lt;- aov(y ~ density, data = subset(snails, season == &quot;Spring&quot;)) lm() vs aov() fits the same model but (i) aov() returns object of class aov, lm() returns object of class lm (ii) print.aov() and summary.aov() will not evaluate each factor level separately but an entire factor at once (similar to drop1()) 25.6 ANOVA table summary(fit) ANOVA table including F-test Reports Type I Sum of Squares anova(fit) ANOVA table including F-test Reports Type I Sum of Squares identical output as summary(fit) for objects of class aov drop1(fit, scope = ~., test = \"F\") ANOVA table including F-test Reports Type III Sum of Squares Technical issue! necessary to set options(contrasts = c(\"contr.sum\", \"contr.sum\")) Tests in hirarchical order if scope is not set (does not test main factor if interaction is included). scope = ~. means that each term is tested. anova(fit, fit2) ANOVA table which compares RSS of two nested models 25.6.1 Types of Sum of Sqares Sum of Squares do only differ if the data is unbalanced. Type I summary(fit) Type II car::Anova(fit, type = \"II\", data = df) Type III drop1(fit, scope = ~., test = \"F\", data = df) necessary to set options(contrasts = c(\"contr.sum\", \"contr.poly\")) 25.7 Model comparison Different in 1 model term # Type I Sum of Squares summary(fit) # Type III Sum of Sqares drop1(fit, test = &quot;F&quot;) add1(fit, scope = ~pred, test = &quot;F&quot;) Different in &gt;1 model term anova(fit, fit2) Interpretation of significance in anova() always in favour of larger model no matter if anova(fit, fit2) or anova(fit2, fit) 25.8 Coefficients coef() Levels which are shown depends on parameterization (contrast option) dummy.coef() All levels are shown Coef name according to factor level name coef(fit) ## (Intercept) grouptrt1 grouptrt2 ## 5.032 -0.371 0.494 dummy.coef(fit) ## Full coefficients are ## ## (Intercept): 5.032 ## group: ctrl trt1 trt2 ## 0.000 -0.371 0.494 25.9 Tests and CI for coeficients summary.lm(fit) Estimates effect \\(\\hat{\\alpha}_i\\) and p-value for each factor level p-values not useful because we should not drop single factor levels but entire factors (drop1()) confint() CI for each coefficient summary.lm(fit) ## ## Call: ## aov(formula = weight ~ group, data = PlantGrowth) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1.0710 -0.4180 -0.0060 0.2627 1.3690 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 5.0320 0.1971 25.527 &lt;2e-16 *** ## grouptrt1 -0.3710 0.2788 -1.331 0.1944 ## grouptrt2 0.4940 0.2788 1.772 0.0877 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.6234 on 27 degrees of freedom ## Multiple R-squared: 0.2641, Adjusted R-squared: 0.2096 ## F-statistic: 4.846 on 2 and 27 DF, p-value: 0.01591 confint(fit) ## 2.5 % 97.5 % ## (Intercept) 4.62752600 5.4364740 ## grouptrt1 -0.94301261 0.2010126 ## grouptrt2 -0.07801261 1.0660126 25.10 Predict predict(fit, newdata = data.frame(group = c(&quot;ctrl&quot;, &quot;trt1&quot;, &quot;trt2&quot;))) ## 1 2 3 ## 5.032 4.661 5.526 newdata has to be a data.frame with all predictor variables in columns with the same name as the original predictor in the model (here y ~ group) 25.11 Diagnostic plots plot(fit, which = 1) # Tukey-Anscombe plot plot(fit, which = 2) # QQ-plot 25.11.1 Simulations Simulations can help to see if the observed pattern is far away from the assumptions. If our data is fine, the observed pattern should look similar to the simulated one (which fulfilles the assumptions). Simulations for QQ plot qqnorm(rnorm(nrow(df))) Simulations for Tukey-Anscombe plot df &lt;- PlantGrowth df.sim &lt;- df set.seed(12) par(mfrow = c(4, 5)) for(i in 1:20){ df.sim[, &quot;y&quot;] &lt;- simulate(fit) fit.sim &lt;- update(fit, data = df.sim) plot(fit.sim, which = 1) } 25.11.2 QQ plot in mixed models Normal QQ plot for each random variable fit.lme &lt;- lmer(y ~ (1 | day) + (1 | machine) + (1 | machine:day), data = trigly) qqnorm(ranef(fit.lme)$day[,1], main = &quot;day&quot;) qqnorm(ranef(fit.lme)$machine[,1], main = &quot;machine&quot;) qqnorm(ranef(fit.lme)$&#39;machine:day&#39;[,1], main = &quot;machine:day&quot;) qqnorm(resid(fit.lme), main = &quot;residuals&quot;) 25.12 Contrasts library(multcomp) ## manual contrast fit.gh &lt;- glht(fit, linfct = mcp(group = c(1, -1/2, -1/2))) ## several manual contrasts K &lt;- rbind(mycontr1 = c(1, -1/2, -1/2), # ctrl vs. average of trt1 and trt2 mycontr2 = c(1, -1, 0)) # ctrl vs. trt1 fit.man &lt;- glht(fit, linfct = mcp(group = K)) ## predefined contrasts fit.gh &lt;- glht(fit, linfct = mcp(group = &quot;Tukey&quot;)) fit.gh &lt;- glht(fit, linfct = mcp(group = &quot;Dunnett&quot;)) K has to be a matrix where each row is a contrast TukeyHSD(fit) does the same as fit.gh &lt;- glht(fit, linfct = mcp(group = \"Tukey\")) 25.12.1 Test contrast summary(fit.man, test = adjusted(&quot;none&quot;)) ## ## Simultaneous Tests for General Linear Hypotheses ## ## Multiple Comparisons of Means: User-defined Contrasts ## ## ## Fit: aov(formula = weight ~ group, data = PlantGrowth) ## ## Linear Hypotheses: ## Estimate Std. Error t value Pr(&gt;|t|) ## mycontr1 == 0 -0.0615 0.2414 -0.255 0.801 ## mycontr2 == 0 0.3710 0.2788 1.331 0.194 ## (Adjusted p values reported -- none method) 25.13 Multiple comparison 25.13.1 Bonferroni Holm (Planned contrasts) summary(fit.man) # takes defalut option which is single-step summary(fit.man, test = adjusted(&quot;single-step&quot;)) summary(fit.man, test = adjusted(&quot;none&quot;)) summary(fit.man, test = adjusted(&quot;bonferroni&quot;)) summary(fit.man, test = adjusted(&quot;holm&quot;)) 25.13.2 Scheffe (Unplanned contrasts) fit.scheffe &lt;- glht(fit, linfct = mcp(group = c(1/2, -1, 1/2))) ## p-value according to Scheffe =&gt; do it manually ## calculate F value with nom-df = g-1 and denom-df = N-g ## in our case g-1 = 2, N-g = 27 pf((summary(fit.scheffe)$test$tstat)^2 / 2, 2, 27, lower.tail = FALSE) ## 1 ## 0.05323245 summary(fit.sheffe)$test$tstat returns t-value of glht t-test ^2 Squared =&gt; F-Test /2 Divide by 2, don’t know why 25.13.3 Tukey HSD (All pairwise comparisons) fit.tukey &lt;- glht(fit, linfct = mcp(group = &quot;Tukey&quot;)) summary(fit.tukey) ## ## Simultaneous Tests for General Linear Hypotheses ## ## Multiple Comparisons of Means: Tukey Contrasts ## ## ## Fit: aov(formula = weight ~ group, data = PlantGrowth) ## ## Linear Hypotheses: ## Estimate Std. Error t value Pr(&gt;|t|) ## trt1 - ctrl == 0 -0.3710 0.2788 -1.331 0.3909 ## trt2 - ctrl == 0 0.4940 0.2788 1.772 0.1981 ## trt2 - trt1 == 0 0.8650 0.2788 3.103 0.0121 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## (Adjusted p values reported -- single-step method) plot(confint(fit.tukey)) Example with compact letter display subCO2 &lt;- CO2[CO2$conc == 1000,] subCO2$tret &lt;- interaction(subCO2$Type, subCO2$Treatment) fit &lt;- aov(uptake ~ tret, data = subCO2) # Tukey&#39;s HSD library(multcomp) tuk &lt;- glht(fit, linfct = mcp(tret = &#39;Tukey&#39;)) summary(tuk) # compact letter display tuk.cld &lt;- cld(tuk) par(mar = c(5,4,6,2)) plot(tuk.cld) Letters will not be displayed if treatment names contain a space (e.g. Quebec nonchilled instead of Quebec.nonchilled). 25.13.4 Dunnett (Comparison with control) ## fitst level is set as control fit.dunnett &lt;- glht(fit, linfct = mcp(group = &quot;Dunnett&quot;)) summary(fit.dunnett) ## ## Simultaneous Tests for General Linear Hypotheses ## ## Multiple Comparisons of Means: Dunnett Contrasts ## ## ## Fit: aov(formula = weight ~ group, data = PlantGrowth) ## ## Linear Hypotheses: ## Estimate Std. Error t value Pr(&gt;|t|) ## trt1 - ctrl == 0 -0.3710 0.2788 -1.331 0.323 ## trt2 - ctrl == 0 0.4940 0.2788 1.772 0.153 ## (Adjusted p values reported -- single-step method) 25.14 Designs 25.14.1 Factorial design xtabs() to count observations per treatment combination interaction.plot() to visualize interaction between factors 25.14.1.1 Test with significant interaction Hyper factor snails$dens_seas &lt;- interaction(snails$density, snails$season) fit &lt;- aov(y ~ dens_seas, data = snails) summary(fit) Individual analysis ## detect significant interation? Yes… # 1) fit single model for each factor level (here: &quot;season&quot;, also for &quot;density&quot; possible) fit.spring &lt;- aov(y ~ density, data = subset(snails, season == &quot;Spring&quot;)) # 2) extract mean square of factor &quot;density&quot; MSS_dens &lt;- summary(fit.spring) [[1]][&quot;density&quot;,&quot;Mean Sq&quot;] # 3) extract mean square of Error from full model MSS_er &lt;- summary(fit)[[1]][&quot;Residuals&quot;, &quot;Mean Sq&quot;] # 3) calculate F value and p value F_value &lt;- MSS_dens/MSS_er pf(F_value, 2, 12, lower.tail = FALSE) ## [1] 0.6520635 # 2: df of &quot;density, 12: df of residuals 25.14.2 Mixed models packages lme4 original lmerTest additional features lmer() fits mixed effects model summary() returns estimates of variance components and fixed effects fixef() fixed effects Tests anova() and drop1() drop1() considers hirarchy (only drops terms which are allowed to be droped) =&gt; make sense with lmer objects no longer possible to extend range with range = ~. confint() CI of random and fixed effects ## Random effects models fit.lme &lt;- lmer(weight ~ (1 | sire), data = animals) fit.lme &lt;- lmer(y ~ (1 | day) + (1 | machine) + (1 | machine:day), data = trigly) ## Mixed effects models fit.lme &lt;- lmer(effort ~ Type + (1 | Subject), data = ergoStool) fit.lme2 &lt;- lmer(score ~ Machine + (1 | Worker) + (1 | Worker:Machine), data = Machines) ## Old fit &lt;- aov(score ~ Machine + Error(Worker + Machine:Worker), data = Machines) Old approach using Error() does not estimate standard deviations of error terms. But the F value of machine is now computed correctly (\\(MS_{Machine}\\) is devided by \\(MS_{Machine:Worker}\\) and not by \\(MS_E\\)) summary(fit.lme) ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [ ## lmerModLmerTest] ## Formula: effort ~ Type + (1 | Subject) ## Data: ergoStool ## ## REML criterion at convergence: 121.1 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -1.80200 -0.64317 0.05783 0.70100 1.63142 ## ## Random effects: ## Groups Name Variance Std.Dev. ## Subject (Intercept) 1.775 1.332 ## Residual 1.211 1.100 ## Number of obs: 36, groups: Subject, 9 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 8.5556 0.5760 15.5298 14.853 1.36e-10 *** ## TypeT2 3.8889 0.5187 24.0000 7.498 9.75e-08 *** ## TypeT3 2.2222 0.5187 24.0000 4.284 0.000256 *** ## TypeT4 0.6667 0.5187 24.0000 1.285 0.210951 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) TypeT2 TypeT3 ## TypeT2 -0.450 ## TypeT3 -0.450 0.500 ## TypeT4 -0.450 0.500 0.500 At section Random effects, the Std.Dev is simply the square root of the Variance not the standard error 25.14.2.1 Fixed effects Estimates fixef(fit.lme) ## (Intercept) TypeT2 TypeT3 TypeT4 ## 8.5555556 3.8888889 2.2222222 0.6666667 Tests drop1(fit.lme) ## Single term deletions using Satterthwaite&#39;s method: ## ## Model: ## effort ~ Type + (1 | Subject) ## Sum Sq Mean Sq NumDF DenDF F value Pr(&gt;F) ## Type 81.194 27.065 3 24 22.356 3.935e-07 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 CI (random and fixed effects) confint(fit.lme, oldNames = FALSE) ## 2.5 % 97.5 % ## sd_(Intercept)|Subject 0.7342354 2.287261 ## sigma 0.8119798 1.390104 ## (Intercept) 7.4238425 9.687269 ## TypeT2 2.8953043 4.882473 ## TypeT3 1.2286377 3.215807 ## TypeT4 -0.3269179 1.660251 25.14.2.2 Random effects Estimates \\(\\sigma_W^2\\), \\(\\sigma_{W:M}^2\\), \\(\\sigma_E^2\\) unlist(VarCorr(fit.lme)) ## Subject ## 1.775463 sigma(fit.lme)^2 ## [1] 1.210648 VarCorr() automatically prints standard deviation \\(\\sigma\\) but stores variance \\(\\sigma^2\\) if assigned or unlisted Estimates \\(\\alpha_i\\), \\(\\beta_j\\), \\((\\alpha\\beta)_{ij}\\) ranef(fit.lme) ## $Subject ## (Intercept) ## 8 -1.708716e+00 ## 5 -1.495127e+00 ## 4 -8.543581e-01 ## 9 -2.135895e-01 ## 6 1.641913e-15 ## 3 4.271791e-01 ## 7 4.271791e-01 ## 1 1.708716e+00 ## 2 1.708716e+00 ## ## with conditional variances for &quot;Subject&quot; Estimates \\(E(\\mu_i | \\alpha_i)\\) coef(fit.lme) ## $Subject ## (Intercept) TypeT2 TypeT3 TypeT4 ## 8 6.846839 3.888889 2.222222 0.6666667 ## 5 7.060429 3.888889 2.222222 0.6666667 ## 4 7.701197 3.888889 2.222222 0.6666667 ## 9 8.341966 3.888889 2.222222 0.6666667 ## 6 8.555556 3.888889 2.222222 0.6666667 ## 3 8.982735 3.888889 2.222222 0.6666667 ## 7 8.982735 3.888889 2.222222 0.6666667 ## 1 10.264272 3.888889 2.222222 0.6666667 ## 2 10.264272 3.888889 2.222222 0.6666667 ## ## attr(,&quot;class&quot;) ## [1] &quot;coef.mer&quot; Tests ## approximate ranova(fit.lme) ## exact library(RLRsim) CI ## approximate confint(fit.lme, oldNames = FALSE) ## exact library(RLRsim) 25.14.3 Nested model ## All equal, different options to specify the nesting lmer(strength ~ (1 | batch) + (1 | sample), Pastes) lmer(strength ~ (1 | batch) + (1 | cask:batch), data = Pastes) lmer(strength ~ (1 | batch/cask), data = Pastes) ## nested as fixed effect aov(strength ~ batch + cask %in% batch, data = Pastes) Nested factors are typically random 25.14.4 Split plot Add main plot as random term. R will automatically recognize across which experimental unit V and N were randomized and test against the correct MS # Example ## Y yield ## B block ## V variety (randomized among main plot) ## N nitrogen (randomized among sub plot) ## B:V main plot fit.lme &lt;- lmer(Y ~ B + V*N + (1 | B:V), data = oats) 25.14.5 Incomplete Block designs 25.14.5.1 Find randomization Unreduced BIBDs (one block for all possible treatment combinations) choose() combn() Any BIBDs crossdes::find.BIB() ibd::ibd() 25.14.5.2 Fit model fit &lt;- aov(dishes ~ session + detergent, data = dish) drop1(fit, test = &quot;F&quot;) # make sure to use drop1() to get Type III MS not summary() 25.15 Power Analysis power.anova.test() package pwr simulations "],["MultivarStat.html", "Chapter 26 Multivariate Statistics 26.1 Data sets 26.2 Some functions", " Chapter 26 Multivariate Statistics 26.1 Data sets 26.2 Some functions 26.2.1 Visualization Glyph plots plot(x~y, pch = z, col = w, cex = v, ...) (up to 5 dimensions) symbols() (&gt; 5 dimensions) stars() stars plot MASS::parcoord() paralell coordinates coplot() conditioning plot `` "],["TimeSeries.html", "Chapter 27 Time series 27.1 Data sets 27.2 Date and Time 27.3 Time series classes 27.4 Differencing", " Chapter 27 Time series 27.1 Data sets data(&quot;AirPassengers&quot;) # Air passengers data(&quot;lynx&quot;) # Lynx Trappings data(&quot;lh&quot;) # Luteinizing Hormone data(&quot;EuStockMarkets&quot;) # Eu Stock Markets data(&quot;co2&quot;) # Mauna Loa CO2 27.2 Date and Time Two important types Date Date-Time 27.2.1 Date Number of days since 1970-01-01 Sys.Date Get current Date 27.2.2 Date-Time Number of seconds since 1970-01-01 00:00:00 POSIXct: number POSIXlt: list of character specifying day, hour, min, sec, … Sys.time Get current Date-Time as.Date() coerce strptime() convert between character and POSIXct 27.3 Time series classes Object classes which are meant for time series 27.3.1 ts Simple Only regularly spaced TS 27.3.1.1 Basic functions ts() create time-series objects start() time of first observation (number) end() time of last observation (number) frequency() the number of observations per unit of time deltat() the fraction of the sampling period between successive observations time() vector of times at which a time series was sampled window() subsetting ts objects myts &lt;- ts(c(10,12,14,13,12,10,5,2,15,23,25,27), start=2004, freq=4) myts ## Qtr1 Qtr2 Qtr3 Qtr4 ## 2004 10 12 14 13 ## 2005 12 10 5 2 ## 2006 15 23 25 27 start(myts) ## [1] 2004 1 end(myts) ## [1] 2006 4 frequency(myts) ## [1] 4 deltat(ts) ## [1] 1 time(myts) ## Qtr1 Qtr2 Qtr3 Qtr4 ## 2004 2004.00 2004.25 2004.50 2004.75 ## 2005 2005.00 2005.25 2005.50 2005.75 ## 2006 2006.00 2006.25 2006.50 2006.75 window(myts, start=2005, end=2006) ## Qtr1 Qtr2 Qtr3 Qtr4 ## 2005 12 10 5 2 ## 2006 15 plot(myts) 27.3.2 zoo Regularly and irregularly spaced TS 27.3.3 futher classes xts its tseries 27.4 Differencing diff() lag = 1 how far back goes the backshift operator \\(Y=(1-B^p)X\\) differences = 1 how many times iteratively apply differencing \\(Y=(1-B)^dX\\) "],["Computational-Statistics.html", "Chapter 28 Computational statistics 28.1 Cross validation 28.2 k nearest neighbor 28.3 Bootstrap", " Chapter 28 Computational statistics 28.1 Cross validation #Randomly shuffle the data dat&lt;-dat[sample(nrow(dat)),] #Create 10 equally size folds folds &lt;- cut(seq(1,nrow(dat)),breaks=10,labels=FALSE) #Perform 10 fold cross validation for(i in 1:10){ #Segement your data by fold using the which() function testIndexes &lt;- which(folds==i,arr.ind=TRUE) testData &lt;- dat[testIndexes, ] trainData &lt;- dat[-testIndexes, ] #Use the test and train data partitions however you desire... } 28.2 k nearest neighbor fit &lt;- kknn(y ~ ., dfTrain, dfTest, k = 8) pred &lt;- predict(fit) 28.3 Bootstrap Problem: If we would know the true Model (data generating mechanism) \\(P\\) we could use simulation to get the distribution of estimator \\(\\hat{\\theta}\\) Idea Simulate from estimated version of \\(P\\) (\\(= \\hat{P}\\)) knitr::include_graphics(path = &quot;figures/bootstrap_diag.png&quot;) knitr::include_graphics(path = &quot;https://www.draw.io/?lightbox=1&amp;highlight=0000ff&amp;edit=_blank&amp;layers=1&amp;nav=1#G1CE9oSwrcFVZVwdF3DGHnH7C9xUT3tmeG&quot;) ## Question: Can I access draw.io graphics which I saved on Google drive directly via a link? "],["reproducible-research.html", "Chapter 29 Reproducible Research 29.1 Tasks 29.2 Chronology", " Chapter 29 Reproducible Research 29.1 Tasks Data R RStudio (IDE) Collaboration Git Writing R Markdown Tinytex TeXworks Literature Zotero BibTeX Communication Inkscape Gimp 29.2 Chronology Step Description Recommended implementation Source Information R, R Markdown Distributed version control Connect and coordinate versions Git Continuous Integration (CI) Test, build and deploy AppVeyor/Travis CI Respository Store and access Github Good package for CI would be tic but I don’t understand it completely. "],["r-studio.html", "Chapter 30 R Studio 30.1 Shortcuts 30.2 Version Control in RStudio", " Chapter 30 R Studio 30.1 Shortcuts Execute line Ctrl + Enter Restart R session Ctrl + Shift + F10 Clear workspace (RZ) Ctrl + Shift + F8 Clear all plots (RZ) Ctrl + Shift + F9 Go to script panel Ctrl + 1 Go to console panel Ctrl + 2 Clear console Ctrl + L Comment Ctrl + Shift + C Pipe Ctrl + Shift + M Assignment operator Alt + - Help F1 Undo Ctrl + Z Redo Ctrl + Shift + Z Sections New section Ctrl + Shift + R Fold all Alt + O Unfold all Shift + Alt + O Mark Mark Shift + Left/Right/Up/Down Mark all Ctrl + Shift + Left/Right Markdown Knit Ctrl + Shift + K Insert chunk Ctrl + Alt + i Shortcuts which are modified are marked with (RZ). You can define your own Shortcuts in RStudio at Tools &gt; Modify Keyboard Shortcuts… Find all shortcuts here 30.2 Version Control in RStudio See this pdf "],["literate-programming.html", "Chapter 31 Literate programming 31.1 Sweave 31.2 Knitr 31.3 R Markdown 31.4 Basic Elements of Latex and R Markdown 31.5 Templates", " Chapter 31 Literate programming Sweave, Knitr and R Markdown all based on Donald Knuth’s Literate programming. Text and code are in a common file and the code follows the structure of the text. 31.1 Sweave Takes text in latex format and R/S code chunks to generate (weave) one tex file. Included in R standard library (utils package) File extension .Rnw (R noweb) 31.2 Knitr Takes several imputs for text (Latex, Markdown, HTML, AsciiDoc, reStructuredText, and Textile) and code (R, Python, …) R package See: Knitr Homepage Knitr can knit two types of files .Rmd files (R Markdown) .Rnw files (R noweb) 31.3 R Markdown Combination of Knitr and Pandoc Knitr: executes the computer code embedded in Markdown, and converts R Markdown to Markdown Pandoc: renders Markdown to the output format you want (such as PDF, HTML, Word, and so on) See: Markdown Manual Compile/Render an R Markdown document by using function rmarkdown::render() pushing knit button (Ctrl + Shift + k) 31.4 Basic Elements of Latex and R Markdown Element Latex/Sweave Rmarkdown/Bookdown Language Reserved characters # $ % ^ &amp; _ { } ~ \\ \\ ` * _ { } [ ] ( ) &gt; # + - . ! and more (not always necessary to escape) Escaped with \\# \\$ \\% \\^{} \\&amp; \\_ \\{ \\} \\~{} \\textbackslash{} \\* \\_ \\\\ Comments % comment &lt;!--comment--&gt; Multiline comment \\usepackage{verbatim} \\begin{comment} comment \\end{comment} &lt;!--comment several lines--&gt; Text options Plain text Plain text Plain text Italics \\textit{text} *text* Bold \\textbf{text} **text** Colored text \\textcolor{red}{text} No general solution (see here) HTML &lt;span style=\"color: red;\"&gt;text&lt;/span&gt; PDF \\textcolor{}{} Subscript2 text$_2$ text~2~ Superscript2 text$^2$ text^2^ Strikethrough \\usepackage{ulem} \\sout{Strikethrough} ~~Strikethrough~~ http://www.google.ch \\url{https://www.google.ch} &lt;http://www.google.ch&gt; Link \\href{https://www.google.ch}{Link} [Link](http://www.google.ch) Unordered list Second level \\begin{itemize} \\item Unordered list \\begin{itemize} \\item Second level \\end{itemize} \\end{itemize} * Unordered list    - Second level Ordered list \\begin{enumerate} \\item Ordered list \\end{enumerate} 1. Ordered list block quote \\begin{quote} Text \\end{quote} &gt; Text Special Characters Nonbreaking space (10 kg) 10~kg 10\\ kg Line break \\\\ENTER \\ENTER – (endash) -- -- — (emdash) --- --- Sections Header \\section{Header} # Header Sub header \\subsection{Subheader} ## Subheader Sub header without number \\subsection*{Subheader} ## Subheader {-} Horizontal line \\noindent\\rule{\\textwidth}{0.4pt} *** Figures Small image \\includegraphics{R_logo2} ![](R_logo2.png){width=50%} Formal image Snipped “fig” \\begin{figure} \\centering \\includegraphics[width=0.5\\textwidth]{R_logo2} \\caption{FigureCaption} \\label{fig:mylabel} \\end{figure} Snipped “fig” ```{r, mylabel, echo=FALSE, fig.cap=&#39;FigCap&#39;, fig.pos=&quot;tb&quot;} knitr::include_graphics(&#39;R_logo2.png&#39;) ``` Attention: label is mylabel but cross-references need to use fig:mylabel Formal image generated with R code Snipped “figR” &lt;&lt;mylabel, echo=FALSE, fig.cap=&#39;FigCap&#39;, fig.pos=&quot;tb&quot;&gt;&gt;= plot(1:3) @ Attention: label is mylabel but cross-references need to use fig:mylabel Snipped “figR” ```{r, mylabel, echo=FALSE, fig.cap=&#39;FigCap&#39;, fig.pos=&quot;tb&quot;} plot(1:3) ``` Attention: label is mylabel but cross-references need to use fig:mylabel Formal image generated with tikz code Snipped “tikz” \\begin{figure} \\centering %%MyTikzCode%% \\caption{mycaption} \\label{fig:mylabel} \\end{figure} Snipped “tikz” ```{tikz, mylabel, echo=FALSE, fig.cap = &#39;myCaption&#39;, fig.pos=&quot;tb&quot;, fig.ext = &#39;png&#39;, engine.opts = list(template = system(&#39;kpsewhich tikz2pdf.tex&#39;, intern=TRUE))} %%MyTikzCode%% ``` Attention: label is mylabel but cross-references need to use fig:mylabel Tables Tables \\begin{longtable}[]{@{}lll@{}} \\caption{The caption}\\\\ \\toprule col1 &amp; col2 &amp; col3\\\\ \\midrule \\endhead 1 &amp; 2 &amp; 3\\\\ 1 &amp; 2 &amp; 3\\\\ \\bottomrule \\label{tab:pros} \\end{longtable} Rmarkdown Equations Inline eqation $A = \\pi*r^2$ $A = \\pi*r^2$ Equation block \\usepackage{amsmath} \\begin{align*} E=mc^2 \\end{align*} $$E=mc^2$$ Equation block with number \\usepackage{amsmath} \\begin{align} a^2 + b^2 = c^2 \\end{align} $$ a^2 + b^2 = c^2 (\\#eq:pythagoras) $$ Code Inline code \\texttt{code} \\lstinline{code} (listings.sty) \\code{code} (RetoArticle.sty) `code` Code block &lt;&lt;eval=FALSE&gt;&gt;= code @ ```{r, eval=FALSE} code ``` Code block as float Snipped “codeblock” \\begin{codeblock}[tb] {\\internallinenumbers \\resetlinenumber[1] \\footnotesize &lt;&lt;eval=FALSE&gt;&gt;= Code @ } \\caption{CodeCaption} \\label{code:Label} \\end{codeblock} Makes only sense for PDF. Use Latex code on left. Numbered/Labeled environments Environment From RetoMath.sty \\begin{example} \\label{ex:label} ... \\end{example} Further environments include definition, result and proof. ```{example, label=&quot;firstExample&quot;} ... ``` For further environments: Bookdown documentation References Label section \\section{Introduction} \\label{sec:intro} # Introduction {#sec:intro} Label figure \\begin{figure} ... \\label{fig:FigLabel} \\end{figure} ```{r, label, fig.cap=&#39;...&#39;} knitr::include_graphics(&#39;figures/hex-rmarkdown.png&#39;) ``` Label table \\begin{longtable}[]{@{}lll@{}} ... \\label{tab:pros} \\end{longtable} ```{r, label} kableExtra::kable(...) ``` Label equation \\begin{align} a^2 + b^2 = c^2 \\label{eq:1} \\end{align} $$ a^2 + b^2 = c^2 (\\#eq:pythagoras) $$ Label code block Only floating code blocks with caption \\begin{codeblock} ... \\caption{CodeCaption} \\label{code:Label} \\end{codeblock} Only floating code blocks with caption Label environment \\begin{example} \\label{ex:label} ... \\end{example} Cross ref section See Chapter~\\ref{sec:label} See Chapter\\ \\@ref(sec:label) Cross ref figure See Figure~\\ref{fig:label} See Figure\\ \\@ref(fig:label) Cross ref table See Table~\\ref{tab:label} See Table\\ \\@ref(tab:label) Cross ref equation See Equation~\\eqref{eq:label} See Equation\\ \\@ref(eq:label) Cross ref code block Cross ref environment Bibliography \\usepackage{biblatex} \\addbibresource{bib.bib} \\begin{document} ... \\printbibliography \\end{document} --- title: Thesis author: &quot;Reto Zihlmann&quot; bibliography: [bib.bib] ... --- Add citation (Autor Year) \\parencite{CitKey} Autor (Year) \\textcite{CitKey} Autor Year \\cite{CitKey} with natbib \\citep{} \\citet{} \\cite{} (Autor Year) [@CitKey] Autor (Year) @CitKey Reference text Laborious. See here (ref:label) text text (ref:label) text Element Latex Rmarkdown 31.5 Templates Sweave Template \\documentclass[11pt, a4paper]{article} \\input{RetoArticle.sty} \\input{RetoMath.sty} \\usepackage[style = authoryear]{biblatex} \\addbibresource{bib.bib} \\title{Title} \\author{Reto Zihlmann} \\date{\\today} \\begin{document} \\maketitle \\tableofcontents \\newpage &lt;&lt;setup, include=FALSE&gt;&gt;= knitr::opts_chunk$set(comment = &quot;##&quot;, tidy = FALSE, fig.align = &quot;center&quot;, out.width = &quot;50%&quot;, fig.width = 7, fig.height = 5, echo = TRUE, warning = FALSE, message = FALSE, error = FALSE) @ \\section{First Section} \\newpage \\printbibliography \\end{document} RMarkdown html Template --- project: R_Ref_Book ################################################# title: Title author: &quot;[Reto Zihlmann](https://retodomax.github.io/)&quot; date: &quot;`r Sys.Date()`&quot; output: bookdown::html_document2: toc: true toc_float: true includes: before_body: /home/reto/texmf/tex/latex/commonstuff/RetoMathjax.tex bibliography: - &quot;`r system(&#39;kpsewhich bib.bib&#39;, intern=TRUE)`&quot; - bib_packages.bib link-citations: true --- ```{r, setup, include=FALSE} knitr::opts_chunk$set(comment = &quot;##&quot;, tidy = FALSE, fig.align = &quot;center&quot;, out.width = &quot;50%&quot;, fig.width = 7, fig.height = 5, echo = TRUE, warning = FALSE, message = FALSE, error = FALSE) ``` ```{r, package-bib, include=FALSE} # automatically create a bib database for R packages knitr::write_bib(c( .packages(), &#39;bookdown&#39;, &#39;knitr&#39;, &#39;rmarkdown&#39;, &quot;mgcv&quot; ), &#39;bib_packages.bib&#39;) ``` &lt;!-- CSS Stype for Figure caption --&gt; &lt;!-- CSS Style for more space between headers --&gt; &lt;style&gt; caption { color: gray; font-size: 0.8em; } p.caption { color: gray; font-size: 0.8em; padding-bottom: 30px; } h1, .h1 { margin-top: 84px; } h2, .h2, h3, .h3 { margin-top: 42px; } &lt;/style&gt; # First Section # References {#ref} RMarkdown pdf Template --- project: R_Ref_Book ################################################# title: Title author: &quot;[Reto Zihlmann](https://retodomax.github.io/)&quot; date: &quot;`r Sys.Date()`&quot; output: bookdown::pdf_document2: includes: in_header: - /home/reto/texmf/tex/latex/commonstuff/RetoArticle.sty - /home/reto/texmf/tex/latex/commonstuff/RetoMath.sty bibliography: - &quot;`r system(&#39;kpsewhich bib.bib&#39;, intern=TRUE)`&quot; - bib_packages.bib link-citations: true classoption: a4paper geometry: margin=2.5cm --- ```{r, setup, include=FALSE} knitr::opts_chunk$set(comment = &quot;##&quot;, tidy = FALSE, fig.align = &quot;center&quot;, out.width = &quot;50%&quot;, fig.width = 7, fig.height = 5, echo = TRUE, warning = FALSE, message = FALSE, error = FALSE) ``` ```{r, package-bib, include=FALSE} # automatically create a bib database for R packages knitr::write_bib(c( .packages(), &#39;bookdown&#39;, &#39;knitr&#39;, &#39;rmarkdown&#39;, &quot;mgcv&quot; ), &#39;bib_packages.bib&#39;) ``` # First Section # References {#ref} "],["latex.html", "Chapter 32 Latex 32.1 Symbols 32.2 Important 32.3 Reto Math 32.4 SfS 32.5 Constructs 32.6 Text format 32.7 Math environments 32.8 Useful packages 32.9 Beamer package 32.10 RetoArticle.sty", " Chapter 32 Latex 32.1 Symbols List of mathematical symbols Space space \\hspace{35pt} space \\qquad big space \\; medium space \\: small space \\, negative space \\! Math \\(\\approx\\) \\approx \\(\\neq\\) \\neq \\(\\leq\\) \\leq \\(\\sim\\) \\sim \\(\\in\\) \\in \\(\\Rightarrow\\) \\Rightarrow \\(\\mid\\) \\mid \\(\\times\\) \\times \\(\\otimes\\) \\otimes \\(\\partial\\) \\partial \\(\\infty\\) \\infty \\(\\infty\\) \\infty \\(\\mathbb{R}\\) \\mathbb{R} \\(\\underbrace{\\cdots}_{\\cdots}\\) \\underbrace{\\cdots}_{\\cdots} \\(\\binom{n}{k}\\) \\binom{n}{k} 32.2 Important A dot which is not used as the end of a scentence has to be followed by a backslash (/). Otherwise there is too much space afterwards. Important for abbriviations like e.g., i.e., etc., et al., … 32.3 Reto Math These are only working if the output is a pdf and the RetoMath.sty preamble is included bold math \\bm inverse \\inv transpose \\tr 32.4 SfS These are only working if the output is a pdf and the RetoMath.sty preamble is included R \\Rp \\(E[\\dots]\\) \\ERW{} \\(\\text{Var()}\\) \\VAR{} \\(\\hat{\\text{Var}}()\\) VARH{} \\(\\text{Cov()}\\) \\COV{} \\(\\hat{\\text{Cov}}()\\) COVH{} \\(\\text{P}[X = c]\\) \\PR{} \\(\\text{N}()\\) \\Normal{} \\(\\text{N}_n()\\) \\Normali{n}{} \\(\\text{B}()\\) \\Binomial{} \\(\\text{Bernoulli}()\\) \\Bernoulli{} \\(\\text{Exp}()\\) \\Exponential{} \\(\\text{Pois}()\\) \\Poisson{} Command Result Command Result Command Result \\ERW{X} \\(\\ERW{X}\\) \\ERWi{X} \\(\\ERWi{n}{X}\\) \\ERWSymbol \\(\\ERWSymbol\\) \\VAR{X} \\(\\VAR{X}\\) \\VARi{n}{X} \\(\\VARi{n}{X}\\) \\VARSymbol \\(\\VAR{X}\\) \\VARH{X} \\(\\VARH{X}\\) \\VARHi{n}{X} \\(\\VARHi{n}{X}\\) \\wh\\VARSymbol \\(\\wh\\VARSymbol\\) \\COV{X,Y} \\(\\COV{X,Y}\\) \\COVi{n}{X,Y} \\(\\COVi{n}{X,Y}\\) \\COVSymbol \\(\\COVSymbol\\) \\COVH{X,Y} \\(\\COVH{X,Y}\\) \\COVHi{n}{X,Y} \\(\\COVHi{n}{X,Y}\\) \\wh\\COVSymbol \\(\\wh\\COVSymbol\\) \\COR{X,Y} \\(\\COR{X,Y}\\) \\CORi{n}{X,Y} \\(\\CORi{n}{X,Y}\\) \\CORSymbol \\(\\CORSymbol\\) \\CORH{X,Y} \\(\\CORH{X,Y}\\) \\CORHi{n}{X,Y} \\(\\CORHi{n}{X,Y}\\) \\wh\\CORSymbol \\(\\wh\\CORSymbol\\) \\PR{X = c} \\(\\PR{X = c}\\) \\PRi{n}{X = c} \\(\\PRi{n}{X = c}\\) \\PRSymbol \\(\\PRSymbol\\) \\Normal{\\mu, 1} \\(\\Normal{\\mu, 1}\\) \\Normali{n}{\\mu, 1} \\(\\Normali{n}{\\mu, 1}\\) \\NormalSymbol \\(\\NormalSymbol\\) \\Binomial{n,p} \\(\\Binomial{n,p}\\) \\Binomiali{n}{n,p} \\(\\Binomiali{n}{n,p}\\) \\BinomialSymbol \\(\\BinomialSymbol\\) \\Bernoulli{p} \\(\\Bernoulli{p}\\) \\Bernoullii{n}{p} \\(\\Bernoullii{n}{p}\\) \\BernoulliSymbol \\(\\BernoulliSymbol\\) \\Exponential{\\lambda} \\(\\Exponential{\\lambda}\\) \\Exponentiali{n}{\\lambda} \\(\\Exponentiali{n}{\\lambda}\\) \\ExponentialSymbol \\(\\ExponentialSymbol\\) \\Poisson{\\lambda} \\(\\Poisson{\\lambda}\\) \\Poissoni{n}{\\lambda} \\(\\Poissoni{n}{\\lambda}\\) \\PoissonSymbol \\(\\PoissonSymbol\\) 32.5 Constructs \\(\\begin{pmatrix} b_1 \\\\ \\vdots \\\\ b_n \\end{pmatrix}\\) \\begin{pmatrix} b_1 \\\\ \\vdots \\\\ b_n \\end{pmatrix} 32.6 Text format Colored text \\textcolor{red}{...text...} 32.7 Math environments Reto Math supports Theorems, Definitions, Results, Proofs and Examples. Definitions are followed by a black diamond (\\(\\blacklozenge\\)), Proofs by an open square (\\(\\square\\)) and examples by a filled square(\\(\\blacksquare\\)). Example \\begin{example} This is an example \\end{example} If math environment ends with display (equation block) add \\qedhere to end of equation such that symbol is on same line as the equation and no page break can happen between end of equation and symbol. \\begin{example} This is an example \\begin{equation*} x = 1+2 \\qedhere \\end{equation*} \\end{example} Detailed information here Consider replacing the current solution with package ntheorem (reasons outlined here. However, there are also arguments against it here) 32.8 Useful packages siunitx Well formatted SI units Well formatted scientific number notation 32.9 Beamer package Themes and colors See them here can be defined in the preamble \\documentclass{beamer} \\usetheme{Boadilla} \\usecolortheme{seahorse} Use tikz to add rectangles You can add rectangles over the output of R using package tikz. \\begin{frame}[fragile] \\frametitle{R output} &lt;&lt;size=&#39;tiny&#39;&gt;&gt;= ctl &lt;- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14) trt &lt;- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69) group &lt;- gl(2, 10, 20, labels = c(&quot;Ctl&quot;,&quot;Trt&quot;)) weight &lt;- c(ctl, trt) lm.D9 &lt;- lm(weight ~ group) summary(lm.D9) @ \\tikz[remember picture, overlay]{% % (left bottom corner x, y) rectangle (right top corner x, y) \\draw[red, very thick, rounded corners] (0, 0) rectangle (12.2, 7.0); \\draw[orange, very thick, rounded corners] (1.6, 2.2) rectangle (6.4, 3.2); \\draw[blue, very thick, rounded corners] (4.2, 0.86) rectangle (6.0, 1.20); } \\end{frame} 32.10 RetoArticle.sty RetoArticle.sty % RetoArticle.sty \\usepackage[utf8]{inputenc} \\usepackage[margin=2.5cm]{geometry} \\usepackage[yyyymmdd]{datetime} % data in YYYY-MM-DD \\renewcommand{\\dateseparator}{-} \\usepackage{parskip} % Paragraph not indented but space between paragraph \\usepackage{graphicx} % support the \\includegraphics command and options \\usepackage{xcolor} % color of text \\usepackage{tabularx} % tables with column width according to page size \\usepackage{verbatim} % adds environment for commenting out blocks of text &amp; for better verbatim \\usepackage{titling} % Variable \\theauthor available after \\maketitle % \\usepackage{tcolorbox} \\usepackage{fancyhdr} % load package for footer/header \\pagestyle{fancy} % use this pagestyle (customizable) \\fancyhf{} % clear all header/footers \\fancyfoot[L]{\\scriptsize\\today} \\fancyfoot[C]{\\scriptsize\\thepage} \\fancyfoot[R]{\\scriptsize\\theauthor} \\renewcommand{\\headrulewidth}{0pt} \\renewcommand{\\footrulewidth}{0.3pt} \\fancypagestyle{plain}{} % apply the change also to pages with page style plain (e.g. first page) %%% Highlight code % Color \\definecolor{light-gray}{gray}{0.95} % Necessary packages for lstinline{} and automatic box arround inline lstinline \\usepackage{xpatch} \\usepackage{listings} \\usepackage{realboxes} % lstinline{} with automatic Color box % lstinline allows for special characters, code highlighting, but NO LINEBREAKS with gray box \\lstset{ breaklines=true, % unfortunately breaklines does not work with \\Colorbox basicstyle=\\ttfamily, backgroundcolor=\\color{light-gray}, } \\makeatletter \\xpretocmd\\lstinline{\\Colorbox{light-gray}\\bgroup\\appto\\lst@DeInit{\\egroup}}{}{} \\makeatother % Necessary packages for \\code{} \\usepackage{soul} % multi-line color boxes % \\code{} allows for linebreaks but no special characters (except they are escapted e.g. var_name needs to be written \\code{var\\_name})) \\sethlcolor{light-gray} \\newcommand{\\code}[1]{\\hl{\\texttt{#1}}} % Codeblocks are included with Knitr \\usepackage{newfloat} \\DeclareFloatingEnvironment[ fileext=loc, listname={List of Code}, name=Code, placement=tbhp, within=section, ]{codeblock} \\usepackage{lineno} % For numbering within codeblock %%% Caption format \\usepackage[font={color=darkgray, footnotesize},labelfont={bf}]{caption} %%% Links Hyperrefs \\usepackage{hyperref} \\definecolor{Blue}{rgb}{0,0,0.8} \\definecolor{Red}{rgb}{0.7,0,0} \\hypersetup{% hyperindex,% colorlinks={true},% pagebackref,% linktocpage,% plainpages={false},% linkcolor={Blue},% citecolor={Blue},% urlcolor={Red},% pdfstartview={Fit},% pdfview={XYZ null null null}% } %% Spacing \\newcommand{\\tsp}{\\hskip 5pt} %% horizontal \\newcommand{\\nheight}{\\llap{\\phantom{Xg}}} %% vertical \\let\\proglang=\\textsf % use command \\proglang to write any programming language (e.g. \\proglang Python) \\newcommand*{\\Rp}{\\textsf{R}$\\;$}% R program Explanation Inline code blocks Currently two options \\code{} \\lstinline{} lstinline option is based on package listings and this Tex post Advantage: no escaping of special characters necessary Disadvantage: no line breaking code option is based on package soul Advantage: allows line breaking Disadvantage: special characters have to be escaped "],["reference-management.html", "Chapter 33 Reference management 33.1 Literature 33.2 Cross-References", " Chapter 33 Reference management 33.1 Literature R Markdown recommends using BibTeX databases (text file with .bib extension in a certain format) BibTeX files can be written by hand or generated from common reference management programms like EndNote, Zotero, JabRef, … 33.1.1 Recommended: Using Zotero Download Zotero Download extension Better BibTeX (See: here) Generate automatically updating .bib file Right click on citation Folder Export Format: Better BibTeX, tick Keep updated Select folder with LaTeX file Manage your exports in Bearbeiten -&gt; Einstellungen -&gt; Better BibTeX -&gt; Automatischer Export Use citation key (e.g. Zihlmann2019) within markdown to refere to a certain reference Use drag and drop of Zotero to insert citation key (Better BibTeX Citation Key Quick Copy) @Zihlmann2019 will generate Zihlmann (2019) [@Zihlmann2019] will generate (Zihlmann 2019) [see @Zihlmann2019, pp. 33-35] will generate (see Zihlmann 2019, 33-35) [@Zihlmann2019; @Fritsche1900] will generate (Zihlmann 2019; Fritsche 1900) @Zihlmann2019 [p. 33] says will generate Zihlmann (2019, 33) says @R-packagename to cite an R package (necessary to export package citation before) Further information see Bibliographies and Citations To add citations to the bibliography without using them in the text include --- nocite: | @item1, @item2 ... 33.2 Cross-References Sections Equations Theorems Figures Tables See Bookdown manual Labels may contain (a-z, A-Z, 0-9, -, /) Try to add some citations: See Wickham (n.d.) which was shown several times (Grolemund and Wickham n.d.) References "],["r-markdown-1.html", "Chapter 34 R Markdown 34.1 Components 34.2 Figures 34.3 Tables 34.4 Math 34.5 Special characters 34.6 Section folding 34.7 Add box 34.8 Template 34.9 Good output formats", " Chapter 34 R Markdown 34.1 Components Three basic components of an R Markdown document Metadata (YAML frontmatter) Text (Markdown) Code (R, Python, C++, …) 34.1.1 YAML frontmatter The information of the YAML frontmatter is passed to the output function when the document is rendered. To see all possible options go to the help page of the output function (e.g. ?rmarkdown::html_document or ?bookdown::gitbook). Some options are passed to kniter and some are passed to pandoc. All output functions: beamer_presentation context_document github_document html_document ioslides_presentation latex_document md_document odt_document pdf_document powerpoint_presentation rtf_document slidy_presentation word_document And some of extension packages (you need to include the package name) e.g. tufte::tufte_html The YAML frontmatter follows the a certain syntax starts and ends with three dashes --- tag and value sparated by : true, false (unlike TRUE, FALSE in R) vectors: with square brackets e.g. output: [\"html_document\", \"word_document\"] lists: indet code by two spaces 34.1.2 Text The syntax for text (also known as prose or narratives) is Markdown. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. Find all formatting syntax in detail in the Pandoc Manual e.g.  Inline formatting Links Lists Tables or in less detail in the R Markdown manual \\ : escape ` : code * : italic/bold _ : italic/bold ^ : superscript ~ : subscript $ : formula @ : reference # : header -/+ : itemize &gt; : blockquote 34.1.3 Code 34.1.3.1 Types Two types of code A code chunk starts with three backticks like ```{r} where r indicates the language name, and ends with three backticks. You can write chunk options in the curly braces (e.g., set the figure height to 5 inches: ```{r, fig.height=5}). An inline R code expression starts with `r and ends with a backtick `. 34.1.3.2 Chunck Ouput Text Tables Graphics 34.1.3.3 Chunck options All chunk options can be found in the Knitr Manual Most important chunck options: first element gives the engine (name of the language) second element can be a chunck name e.g. {r, my-name, eval = ...} eval: Whether to evaluate a code chunk. echo: Whether to echo the source code in the output document. results: When set to 'hide', text output will be hidden; when set to 'asis', text output is written “as-is”, e.g., you can write out raw Markdown text from R code (like cat('**Markdown** is cool.\\n')). collapse: Whether to merge text output and source code into a single code block in the output. warning, message, and error: Whether to show warnings, messages, and errors in the output document. include: Whether to include anything from a code chunk in the output document. cache: Whether to enable caching. fig.width and fig.height (or fig.dim): The (graphical device) size of R plots in inches. out.width and out.height: The output size of R plots in the output document in percentage (e.g. out.width = '80%'). fig.align: The alignment of plots. It can be 'left', 'center', or 'right'. dev: The graphical device to record R plots. Typically it is 'pdf' for LaTeX output, and 'png' for HTML output, but you can certainly use other devices, such as 'svg' or 'jpeg'. fig.cap: The figure caption. child: You can include a child document in the main document. This option takes a path to an external file. Set chunk option globally: ```{r, setup, include=FALSE} knitr::opts_chunk$set(comment = &quot;##&quot;, tidy = FALSE, fig.align = &quot;center&quot;, out.width = &quot;50%&quot;, fig.width = 7, fig.height = 5, echo = TRUE, warning = FALSE, message = FALSE, error = FALSE) ``` 34.1.3.4 Code highlighting This is controlled by knitr Different ways for .Rmd and .Rnw documents .Rmd For rmarkdown, the syntax highlighting is provided by pandoc, NOT knitr. Depends if it is code block (no curly braces at top) or code chunk (curly braces at top) For code blocks (without curly braces) everything is handled by pandoc to check which languages are supported go to terminal and type pandoc --list-highlight-languages Supported is e.g. R, bash, latex, bibtex, makefile, python but for example NOT stan. Manual Use the following header --- title: &quot;My Document&quot; output: html_document: theme: tango --- Possible themes include: default, tango, pygments, kate, monochrome, espresso, zenburn, haddock, breezedark, and textmate Preview all themes Modify themes (not so easy!) .Rnw syntax highlighting is provided by knitr Manual Preview all themes Modify themes put knit_theme$set(\"~/texmf/RetoKnitrCodeHighlight.css\") in the first code chunk and create/modify RetoKnitrCodeHighlight.css 34.2 Figures Plot from code chunks or insert via knitr::include_graphics() e.g. ```{r, echo = FALSE, out.width=&#39;25%&#39;, fig.align=&#39;center&#39;, fig.cap=&#39;...&#39;} knitr::include_graphics(&#39;figures/hex-rmarkdown.png&#39;) ``` Figure 34.1: The R Markdown hex logo. Chunk options fig.cap = \"text\" Figure captation text or text reference out.width &lt; '50%', fig.show='hold', fig.align='default' Show figures next to each other Possible Bug: figures often are on top of each other Always include fig.align='default' and it should work Recommended file format If output pdf use pdf images (svg not possible!) If output html use png images If output both use png options(knitr.graphics.auto_pdf = TRUE) pdf output will automatically take file with same name but pdf format if it is available. Wrap text arround plot Plots can be placed on right side with text wrapped around it. Use the following chunk options: ```{r, out.width=&#39;25%&#39;, echo = FALSE, out.extra=&#39;style=&quot;float:right; padding:5px&quot;&#39;} knitr::include_graphics(&#39;figures/hex-rmarkdown.png&#39;) ``` Include figure which serves as a link &lt;a href=&quot;figures/03_pdf/lubridate.pdf&quot; target=&quot;_blank&quot;&gt; ```{r, echo=FALSE, out.width=&#39;50%&#39;} knitr::include_graphics(&#39;figures/03_pdf/lubridate.jpg&#39;) ``` &lt;/a&gt; target=\"_blank\" makes sure that the browser opens the pdf in a new tab. To include a pdf without figure, just replace the R chunk part with some words. 34.3 Tables For data in R use knitr::kable()/kableExtra::kbl() flextable gt Quick coercion of complex objects (fitted model, anova table …) to Latex/HTML tables: xtable For text use Pandoc tables Available Simple tables Multiline tables Grid tables Pipe tables Recommended to use pipe tables for simple tables (generate here) Grid tables where you need bullet points within the table (generate here) pipe tables will always be full width in html and not full width in pdf. To make them a specific width in html use &lt;div style=&quot;width: 50%;&quot;&gt; | Col1 | Col2 | |------|:----:| | 1 | 2 | | 3 | 4 | &lt;/div&gt; Without using a header, the formated table is reduced to an unformatted html table. Avoid this by including a white space into the header () 34.3.1 HTML tables Tables can be formatted in CSS if we are only interested in HTML output. Add the following internal &lt;style&gt; element (in document between &lt;style&gt; and &lt;/style&gt; tag) or use an external CSS file (style.css). Definition tables /* definition tables (RZ) */ .book .book-body .page-wrapper .page-inner section.normal .deftab td, .book .book-body .page-wrapper .page-inner section.normal .deftab th, .book .book-body .page-wrapper .page-inner section.normal .deftab tr { padding:0; border-style: hidden; background-color: white; } .deftab th, .deftab td { vertical-align: top; text-align: left; } .deftab th { width: 20%; /* header cells are 20% width (first column) */ } .deftab td:nth-child(1) { width: 20%; /* first td cell also 20% width (first column) */ } Afterwards we can use HTML tags to create the table &lt;table class = &quot;deftab&quot;&gt; &lt;tr&gt; &lt;td&gt;**Doe**&lt;/td&gt; &lt;td&gt;John&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Doe&lt;/td&gt; &lt;td&gt;John&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Doe&lt;/td&gt; &lt;td&gt;John&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; Results in Doe John Doe John Doe John 34.4 Math New math commands can be included via Latex for pdf or Mathjax for html. See this StackOverflow post on how to include a Mathjax preamble 34.5 Special characters Mathematical stuff with Latex \\(\\alpha\\) \\(\\Gamma\\) \\(\\ggg\\) \\(\\notin\\) \\(\\dagger\\) \\(\\mathbb{R}\\) \\(\\Rightarrow\\) \\(\\infty\\) \\(n\\) What you can reach on the keyboard, use keyboard §°+“ç%&amp;/()=?¦¬|¢~[]èéàüöä&lt;$£ Some characters with special meaning in markdown needs to be escaped with \\ Everywhere \\ ` * _ ^ ~ $ @ { } Beginning of new line # - + &gt; Furter characters Find symbol with google, copy-paste (e.g. €) Find html code (e.g. &amp;euro; \\(\\Rightarrow\\) €) Find many here html code examples examples &amp;nbsp; for non-breaking space (several after each other possible) &amp;Tab; for a tab &amp;#128512; for  &amp;larr; for ← (does work in pdf) &amp;rArr; for ⇒ (does not work in pdf) Will not always work with pdf output (some characters work others not)! Text writing symbols “\\” backslash followed by space = nonbreaking space backslash followed by newline = hard line break -“ ” thin nonbreaking space -“‑” nonbreaking hythen (should be used as hythen minus) 34.6 Section folding Section folding is only available for HTML documents. There are two good options Global code folding Local section folding Global code folding Well explained here. Put the line code_folding: hide in the YAML header --- title: &quot;My Document&quot; output: html_document: code_folding: hide --- You can specify code_folding: show to still show all R code by default but then allow users to hide the code if they wish. Local section folding Good ideas can be found here. Here we describe a methode with HTML/CSS buttons. Add HTML code for button at beginning of your document. Alternatively you make a separate html file. Find button code and how to make separate HTML file in Chapter 35.2 Add this HTML code at the place were you want the button. &lt;button onclick=&quot;myFunction(&#39;new_identifier&#39;)&quot;&gt;Text on button&lt;/button&gt; &lt;div id=&quot;new_identifier&quot; style=&quot;display: none&quot;&gt; Blabla. &lt;/div&gt; Replace new_identifier with unique identifier for that section. Replace Text on button and Blabla 34.7 Add box These type of boxes are only available for HTML documents. There is a good implementation to add boxes for caution, important, note, tip and waring Add CSS code for button at beginning of your document. Alternatively you make a separate CSS style file. Find button code and how to make separate CSS style file in Chapter 35.2 Add this code at the place were you want the button. ```{block2, type=&#39;rmdcaution&#39;} Text ``` Replace rmdcaution with rmdimportant, rmdnote, rmdtip and rmdwarning. Note that the code chunk always needs to be taged as block2. Here how they look like Caution Important Note Tip Warning 34.8 Template This is a template containing structure, equations, references, cross-references, figures and tables with caption. The rendered output of the template can be found here. To get the the template in pdf, replace the output section in the YAML header with output: bookdown::pdf_document2: includes: in_header: - /home/reto/texmf/tex/latex/commonstuff/RetoArticle.sty - /home/reto/texmf/tex/latex/commonstuff/RetoMath.sty classoption: a4paper geometry: margin=2.5cm A shorted template is available as code snipped “html” and “pdf”. Show template --- project: MyProj ################################################# title: Template author: &quot;[Reto Zihlmann](https://retodomax.github.io/)&quot; date: &quot;`r Sys.Date()`&quot; output: bookdown::html_document2: toc: true toc_float: true bibliography: - &quot;C:/Users/858782/texmf/bibtex/bib/bib.bib&quot; - bib_packages.bib link-citations: true --- ```{r, setup, include=FALSE} knitr::opts_chunk$set(comment = &quot;&quot;, tidy = TRUE, fig.align = &quot;left&quot;, out.width = &quot;100%&quot;, echo = FALSE, warning = FALSE, message = FALSE, error = FALSE) ``` ```{r, package-bib, include=FALSE} # automatically create a bib database for R packages knitr::write_bib(c( .packages(), &#39;bookdown&#39;, &#39;knitr&#39;, &#39;rmarkdown&#39;, &quot;mgcv&quot; ), &#39;bib_packages.bib&#39;) ``` &lt;!-- CSS Stype for Figure caption --&gt; &lt;!-- CSS Style for more space between headers --&gt; &lt;style&gt; caption { color: gray; font-size: 0.8em; } p.caption { color: gray; font-size: 0.8em; padding-bottom: 30px; } h1, .h1 { margin-top: 84px; } h2, .h2, h3, .h3 { margin-top: 42px; } &lt;/style&gt; # Abstract {-} Here is some small abstract. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. # Introduction {#intro} Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. 1. What is the first research question? 2. How should we answer it? 3. What is the third research question? # Method {#method} ## Idea {#idea} Lorem ipsum dolor sit amet, consectetur adipiscing elit (see [here](https://www.google.ch/)), sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Some inline equation $h = f(x)$ in the middle of text. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. $$ a^2 + b^2 = c^2 (\\#eq:pythagoras) $$ As you can see in Equation \\@ref(eq:pythagoras), lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. ```{r, someCalculations, echo = T} x &lt;- 5.012345678901234567890 y &lt;- 1:20 ``` In this text we use the variable $x$ and write it 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 inline in text. Now a picture (ref:resPr3) This is the figure caption. We can use it to explain the content of the figure. We can use it to explain the content of the figure. We can use it to explain the content of the figure. We can use it to explain the content of the figure. ## Calcultion {#calc} ```{r, figPoints, fig.cap=&quot;(ref:resPr3)&quot;} plot(1:10) ``` Now we continue with some text. As you can see in Figure \\@ref(fig:figPoints) there are 10 points. The same was also decribed in Section \\@ref(intro) or in Equation \\@ref(eq:pythagoras) or in the package `rmarkdown` [see @R-bookdown]. The second way to make References [@R-mgcv]. For the third way see @R-knitr. # Discussion {#disc} Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. ```{r} library(magrittr) library(kableExtra) dt &lt;- mtcars[1:5, 1:6] kable(dt, digits = 3, caption = &quot;Estimated motor current and standard deviation for each impeller at the two operating points&quot;) %&gt;% kable_styling(&quot;striped&quot;, full_width = F, position = &quot;left&quot;) %&gt;% add_header_above(c(&quot; &quot; = 1, &quot;Group 1&quot; = 2, &quot;Group 2&quot; = 2, &quot;Group 3&quot; = 2)) ``` # References {#ref} Good resources for additional tips/templates https://holtzy.github.io/Pimp-my-rmd/ (Tips) https://github.com/juba/rmdformats (Templates package) 34.9 Good output formats lightweight: rmarkdown::html_vignette Details see here full-featured: bookdown::gitbook Option split_by: none allows to get one long page Option self_containd: true allows that all css and figure are included in html output file classic: bookdown::html_document2 Options title: Test author: &quot;[Reto Zihlmann](https://retodomax.github.io/)&quot; date: &quot;2020-11-09&quot; output: bookdown::gitbook: split_by: none self_contained: true gitbook with option self_containd: true does currently not work with MathJax (Math not correcly displayed). For updates on this issue see here, here and here. "],["bookdown.html", "Chapter 35 Bookdown 35.1 Configuration 35.2 Create new project", " Chapter 35 Bookdown 35.1 Configuration Some options are passed to bookdown::render() kniter pandoc Where to define configuration (see also here) _bookdown.yml _output.yml yaml header of first document (index) Example with all possible default options 35.1.1 _bookdown.yml book_filename: &quot;myBookname&quot; delete_merged_file: true language: ui: chapter_name: &quot;Chapter &quot; chapter_name: &quot;Chapter &quot; repo: https://github.com/seankross/bookdown-start output_dir: docs rmd_files: [&quot;index.Rmd&quot;, &quot;01-Introduction.Rmd&quot;, &quot;02-Diving-In.Rmd&quot;] clean: [packages.bib, bookdown.bbl] new_session: yes Here: add explanation to each option 35.1.2 _output.yml bookdown::gitbook: css: style.css split_by: chapter config: toc: collapse: subsection before: | &lt;li&gt;&lt;a href=&quot;./&quot;&gt;A Minimal Bookdown Book&lt;/a&gt;&lt;/li&gt; after: | &lt;li&gt;&lt;a href=&quot;https://github.com/rstudio/bookdown&quot; target=&quot;blank&quot;&gt;Published with bookdown&lt;/a&gt;&lt;/li&gt; bookdown::pdf_book: includes: in_header: preamble.tex latex_engine: xelatex citation_package: natbib bookdown::epub_book: stylesheet: style.css 35.1.3 yaml header --- title: &quot;A Minimal Bookdown Book&quot; author: &quot;Sean Kross&quot; date: &quot;2016-12-02&quot; site: bookdown::bookdown_site documentclass: book bibliography: [book.bib] biblio-style: apalike link-citations: yes github-repo: seankross/bookdown-start url: &#39;http\\://seankross.com/bookdown-start/&#39; description: &quot;Everything you need (and nothing more) to start a bookdown book.&quot; --- 35.2 Create new project Open template of RStudio Connect with GitHub repository and push Go to github.com/retodomax/projectname Go to Settings At GitHub Pages set source to docs folder Don’t worry if page does not immideatly appear on link (takes long time to be built) Go to _bookdown.yml file, add output_dir: docs Go to _output.yml file Delete all pdf/ebook output Delete download: [\"pdf\", \"epub\"] Add these lines config: fontsettings: theme: white family: sans size: 1 edit: https://github.com/retodomax/R_Ref_Book/edit/master/%s includes: in_header: header.html Go to index.Rmd, add these lines github-repo: &quot;retodomax/R_Ref_Book&quot; cover-image: &quot;figures/01_cover/Cover.svg&quot; favicon: &quot;figures/00_icon/icon.ico&quot; Add header.html file with following content: (hide button) &lt;script&gt; function myFunction(myid) { var x = document.getElementById(myid); if (x.style.display === &quot;none&quot;) { x.style.display = &quot;block&quot;; } else { x.style.display = &quot;none&quot;; } } &lt;/script&gt; Go to styles.css, add these lines /* definition tables (RZ) */ .book .book-body .page-wrapper .page-inner section.normal .deftab td, .book .book-body .page-wrapper .page-inner section.normal .deftab th, .book .book-body .page-wrapper .page-inner section.normal .deftab tr { padding:0; border-style: hidden; background-color: white; } .deftab th, .deftab td { vertical-align: top; text-align: left; } .deftab th { width: 20%; /* header cells are 20% width (first column) */ } .deftab td:nth-child(1) { width: 20%; /* first td cell also 20% width (first column) */ } /* boxes with warnings, notes, tips,... */ .rmdcaution, .rmdimportant, .rmdnote, .rmdtip, .rmdwarning { padding: 1em 1em 1em 4em; margin-bottom: 10px; background: #f5f5f5 5px center/3em no-repeat; } .rmdcaution { background-image: url(&quot;../figures/02_css/caution.png&quot;); } .rmdimportant { background-image: url(&quot;../figures/02_css/important.png&quot;); } .rmdnote { background-image: url(&quot;../figures/02_css/note.png&quot;); } .rmdtip { background-image: url(&quot;../figures/02_css/tip.png&quot;); } .rmdwarning { background-image: url(&quot;../figures/02_css/warning.png&quot;); } Add folder figures with following subfolders (containing png files) 00_icon 01_cover 02_css "],["git-version-control.html", "Chapter 36 Git version control 36.1 Bash basics 36.2 Git basics 36.3 Global config 36.4 SSH keys 36.5 Common tasks 36.6 Single user 36.7 Multiple users 36.8 Version Control in RStudio 36.9 Extensions", " Chapter 36 Git version control 36.1 Bash basics pwd print working directory cd change directory ls list all files within directory head show head of file rm remove file mkdir make directory touch create empty file, change timestamps of a file echo \"Text\" &gt; README.txt create/overwrite text file echo \"Text\" &gt;&gt; README.txt append text to text file cat README.txt print textfile to console 36.2 Git basics Two very good intros: Happy git with R Pro Git or 1st edition in german Download Git: here Recommended: do your first steps with a Git client (GUI) to get a feeling for the workflow. Good clients are SourceTree, GitKraken but there are many more here. Very lightwight and the first GUI was gitk which is a GUI wrapper of the command git log and has only limited functionality. Famous Cheatsheet website basic git commands git config change global/local variables (name, email, …) git init initialize git respository git add add file to staged area, “stage file” git commit commit staged files git push push your branch to origin git pull pull newest branch to your local 36.3 Global config git config --global user.name &#39;Reto Zihlmann&#39; git config --global user.email &#39;retozihlmann@outlook.com&#39; git config --global --list user.email should be the same as used for your server (otherwise your commits appear as if they were done by someone else) for GitHub: user.name ‘retodomax’, user.email ‘retozihlmann@outlook.com’ for GitLab: user.name ‘retoz’, user.email ‘retoz@student.ethz.ch’ config file is normally located in your HOME directory ~ in Windows ~ often corresponds to C:\\Users\\Reto 36.4 SSH keys ssh-keygen -t rsa -b 4096 -C &quot;retozihlmann@outlook.com Lenovo&quot; text at end of command should be something to recognize a computer only generate new keys if you have non find them in ~/.ssh keygen will open dialog (always leave empty and press enter) after you generated your keys they have to be added to the ssh-agent and to the server Check if agent is running eval $(ssh-agent -s) Add keys to agent ssh-add ~/.ssh/id_rsa Add keys to server github.com -&gt; Settings -&gt; SSH list existing keys ls -al ~/.ssh/ 36.5 Common tasks Clone repo to your local computer git clone https://github.com/retodomax/YOUR-REPOSITORY.git Conect with remote respository Figure 36.1: … Show origin variable git remote show origin or shorter git remote -v Show branch we are traking git branch -vv 36.6 Single user 36.6.1 Regular workflow Make new project in RStudio (tick “Create a git repository”) Make first commit (impossible to push empty git file) Go to Server (e.g. github.com) and create new respository (Do not add README) copy two git commands for pushing existing respository use https or ssh link git remote add origin https://github.com/retodomax/My_project.git git push -u origin master paste commands in in Git Bash opend in the project folder Attention: You can also use the RStudio Shell BUT it often does not find the right path to the keys (for ssh). 36.6.2 Troubleshooting git@github.com: Permission denied (pulickey): Are correct public keys registered on server website fatal: remote origin already exists.: there is already an “old” origin defined, which first needs to be removed. Use git remote rm origin Could not create directory '/c/Users/Reto/OneDrive - ETHZ/Dokumente/.../repo/=/.ssh': RStudio shell has some problems in finding the HOME path to your keys. Use Git Bash instead to type in the command. 36.7 Multiple users 36.7.1 get foreign respository (fork) Make folder where you want working directory Right click and open: “Git bash here” git clone LINK –LINK can be found at “Clone or download” button of the github project (e.g. https://github.com/Stanimir-Ivanov/stats-lab.git) 36.8 Version Control in RStudio See this pdf 36.9 Extensions Large File Storage Specify files which should not be added to git but instead replaced with text pointer and stored separtely on server Makes sure, git repository does not become too large "],["git2.html", "Chapter 37 git2 37.1 Common tasks", " Chapter 37 git2 37.1 Common tasks create a new repository on the command line echo &quot;# test&quot; &gt;&gt; README.md git init git add README.md git commit -m &quot;first commit&quot; git remote add origin git@github.com:retodomax/test.git git push -u origin master push an existing repository from the command line git remote add origin git@github.com:retodomax/test.git git push -u origin master clone existing repository and push changes git clone git@github.com:retodomax/test.git cd test touch README.md git add README.md git commit -m &quot;add README&quot; git push -u origin master push existing folder to origin cd existing_folder git init git remote add origin git@github.com:retodomax/test.git git add . git commit git push -u origin master "],["makefiles.html", "Chapter 38 Makefiles 38.1 Tutorials 38.2 Small examples 38.3 Explanantion 38.4 Usefull commands 38.5 Recursive search for file in path 38.6 Print variable in Makefile 38.7 Sweave and knitr 38.8 General Recomondations for Multi-file LaTeX projects", " Chapter 38 Makefiles 38.1 Tutorials Makefiles and Sweave Manual of make Stack Overflow Baker (2020) JSS 38.2 Small examples Simple: Run specific bash commands # Sweave all Rnw R CMD Sweave ./../chapters/chapter1.Rnw R CMD Sweave ./../chapters/chapter2.Rnw # Create Slides pdflatex slides.tex # Extract R code from Rnw R CMD Stangle ./../chapters/chapter1.Rnw R CMD Stangle ./../chapters/chapter2.Rnw # Creating one file with all Code cat chapter1.R chapter2.R &gt; demo.R # Removes Chunks in Democode sed &quot;/chunk/d&quot; demo.R &gt; democode.R rm -f demo.R # Cleaning Folder rm -f *.aux *.log *.toc *.nav *.snm *.vrb *.out *.aux chapter*.tex chapter*.R # make 2x2 pdf of slides pdfnup --nup 2x2 --suffix &#39;2x2&#39; slides.pdf Better: Specify rules how target files can be built # Makefile # File lists: RNW = $(wildcard rnw/*.Rnw) R = $(patsubst %.Rnw,%.R,$(RNW)) TEX = $(patsubst %.Rnw,%.tex,$(RNW)) # Master file: MASTER = MasterThesisSfS # Meta rules: .Rnw.tex: Rscript -e &quot;library(knitr); knitr::knit(&#39;$&lt;&#39;,&#39;$@&#39;)&quot; # $&lt; is prerequisite, and $@ is target .Rnw.R: Rscript -e &quot;library(knitr); knitr::purl(&#39;$&lt;&#39;,documentation=0L)&quot; .tex.pdf: latexmk -bibtex -synctex=1 -pdf -use-make -halt-on-error \\ -pdflatex=&quot;pdflatex&quot; -silent $(MASTER).tex # Conversion rules: all: $(MASTER).pdf $(MASTER).pdf: $(TEX) $(MASTER).tex short: $(TEX) pdflatex $(MASTER).tex clean: rm -f *~ *.out Rplots.pdf comment.cut \\ *.idx *.ilg *.brf *.blg *.spl $(MASTER).dvi \\ *.backup *.toc *.fls *fdb_latexmk *.synctex.gz cleanall: clean rm -f *.aux *.log *.ind rm -f figures/ff???????_fig*.pdf rm -f ff????????.tex ff????????.R $(MASTER).bbl rm -rf cache .Rhistory # Some technical details .SUFFIXES: .Rnw .R .tex .pdf .SILENT: *.pdf *.tex .PHONY: all short clean cleanall # 2019 Reinhard Furrer, Florian Gerber The above script uses Old-Fashioned Suffix Rules (e.g. .Rnw.tex: which is no longer recommended. # Makefile # Path to search MYFOLD = $(shell find ./../../../01_Material/ -type d) VPATH = tex R $(MYFOLD) # File lists: NecessaryRnwFiles = file1 file2 file3 file4 TEX = $(addsuffix .tex,$(NecessaryRnwFiles)) R = $(addsuffix .R,$(NecessaryRnwFiles)) SVG_ODG = $(shell find ./../../../01_Material/ -type f \\( -name &quot;*.svg&quot; -o -name &quot;*.odg&quot; \\)) PDFimg = $(addsuffix .pdf, $(basename $(SVG_ODG))) # Master file: MASTER = slides # Pattern Rules: %.tex: %.Rnw Rscript -e &quot;library(knitr); knitr::knit(&#39;$&lt;&#39;, &#39;tex/$@&#39;)&quot; %.R: %.Rnw Rscript -e &quot;library(knitr); knitr::purl(&#39;$&lt;&#39;, &#39;R/$@&#39;, documentation=0L)&quot; %.pdf: %.tex latexmk -pdf $&lt; %.pdf: %.svg inkscape --export-type=pdf $&lt; %.pdf: %.odg soffice --convert-to pdf $&lt; --outdir $(dir $@) # Conversion rules: all: $(PDFimg) $(MASTER).pdf demo.R rm -f *.aux *.log *.toc *.nav *.snm *.vrb *.out *.aux *.fls *fdb_latexmk pdfjam --nup 2x2 $(MASTER).pdf --outfile $(MASTER)_2x2.pdf --landscape $(MASTER).pdf: $(TEX) $(MASTER).tex $(MASTER).tex: $(MASTER).Rnw Rscript -e &quot;library(knitr); knitr::knit(&#39;$&lt;&#39;, &#39;$@&#39;)&quot; demo.R: $(R) cat $(addprefix R/, $(R)) &gt; demo.R clean: rm -f $(addprefix tex/, $(TEX)) rm -f $(addprefix R/, $(R)) rm -f *.aux *.log *.toc *.nav *.snm *.vrb *.out *.aux *.fls *fdb_latexmk rm -f $(MASTER).pdf $(MASTER)_2x2.pdf rm -f $(MASTER).tex rm -f demo.R # Technical detail .PHONY: all clean 38.3 Explanantion MYFOLD = $(shell find ./../../../01_Material/ -type d) Lists all the sub-folders in the Material folder Calls shell command find and extracts the path of folders -type d list only directories (no files) earlier I used MYFOLD = $(shell tree ./../../../01_Material/ -d -f -i) but strangely it did not work in the RStudio Terminal. find will return a list separated by newlines? In the VPATH variable, directory names are separated by colons or blanks (see here). Some internet posts suggest to first replace all spaces by colons. However, for me it worked without doing this. Otherwise see here and here. VPATH = tex R $(MYFOLD) VPATH adds directories to the search path of make files will now also be found in folder ./tex, ./R and all directories contained in variable MYFOLD NecessaryRnwFiles = file1 file2 file3 file4 Manual list of files which we will need to compile TEX = $(addsuffix .tex,$(NecessaryRnwFiles)) add suffix ‘.tex’ to all characters in variable NecessaryRnwFiles SVG_ODG = $(shell find ./../../../01_Material/ -type f \\( -name \"*.svg\" -o -name \"*.odg\" \\)) calls shell command find returning name and path of all files following a specific pattern -type f makes sure that only files (not directories) are returned \\( pattern1 -o pattern2 \\) allows to look for two pattern at once *.svg is a pattern with wildcard $(basename $(SVG_ODG)) basename removes file suffix from all characters in variable SVG_ODG Pattern Rules Pattern Rules define how to convert files of a certain extensions to files of another extensions $@ is the file name in the target format, $&lt; the file name in the original format (see Automatic Variables) all: $(PDFimg) $(MASTER).pdf demo.R ... defines the prerequisites and rules to create all which is a Phony Target Prerequisites are all files contained in variable PDFimg, the file with the name which is stored in the variable MASTER with extension pdf, and the file demo.R Afterwards the rules how to ‘create’ all is defined. In this specific case the prerequisite already make sure that all important files are created and the remaining rules just clean up some unnecessary files and create a 2x2 pdf. $(MASTER).pdf: $(TEX) $(MASTER).tex To create the file with the name which is stored in MASTER and the suffix .pdf we first need to some prerequisites. cat $(addprefix R/, $(R)) &gt; demo.R Concatenate all files in variable R, found in folder R, and save the concatenated string to the file demo.R .PHONY: all clean Make sure that make will first find the Phony Target all and clean even if there might be files with the name all and clean. 38.4 Usefull commands Find recursively all Rnw files in directory and put them into vector RNW = $(shell find ./../../../01_Material/ -type f -name &#39;*.Rnw&#39;) 38.5 Recursive search for file in path https://stackoverflow.com/questions/2483182/recursive-wildcards-in-gnu-make https://stackoverflow.com/questions/231229/how-to-generate-a-makefile-with-source-in-sub-directories-using-just-one-makefile 38.6 Print variable in Makefile To debug it can be helpful to print a specific variable. See here .PHONY: printvar printvar: ; $(info $$var is [${var}])echo Hello world Book Managing Projects with GNU Make, Chapter 12, Debugging Makefiles Alternative Debugging methods 38.7 Sweave and knitr Rnw documents with Sweave syntax can be transformed to knitr syntax directly Useful commands knitr::Sweave2knitr() At start of Rnw file: %\\VignetteEngine{knitr::knitr} will make R CMD Sweave to automatically use knitr 38.8 General Recomondations for Multi-file LaTeX projects Overleaf: Multi-file LaTeX projects reddit: graphics path Blog: Organize LaTeX Project References "],["packages-1.html", "Chapter 39 Packages 39.1 Package environment 39.2 Useful packages", " Chapter 39 Packages install.packages() install package require() load package for current R session library() load package for current R session update.packages() update packages citation() cite R or packages 39.1 Package environment Each package has its own environment, which is added to the search path if the package is loaded search() returns search path ls() list object in certain environment find() the environment from which a certain function comes search() # returns search path ls(pos = 2) # object contained in environment nr 2 find(&quot;print&quot;) # Environment in which function &quot;print&quot; is defined 39.2 Useful packages beepr let computer beep "],["cheat-sheets.html", "Chapter 40 Cheat sheets 40.1 Data import 40.2 Data transformation 40.3 Data visualization 40.4 Factors 40.5 Lubridate 40.6 Strings 40.7 Regex 40.8 Purrr 40.9 Tidyeval 40.10 R Studio 40.11 R markdown 40.12 Shiny 40.13 Package development 40.14 Reticulate 40.15 Keras 40.16 Sparklyr", " Chapter 40 Cheat sheets Data pipeline Data import Data transformation Data visualization Special types Factors Lubridate Strings Regex Purrr Tidyeval Framework R Studio R markdown Shiny Package development Machine learning Reticulate Keras Sparklyr 40.1 Data import 40.2 Data transformation 40.3 Data visualization 40.4 Factors 40.5 Lubridate 40.6 Strings 40.7 Regex 40.8 Purrr 40.9 Tidyeval 40.10 R Studio 40.11 R markdown 40.12 Shiny 40.13 Package development 40.14 Reticulate 40.15 Keras 40.16 Sparklyr "],["test.html", "Chapter 41 Test", " Chapter 41 Test Here is a review of existing methods. Doe John Doe John Doe John And now some examples with some space in between and more spaces spaces Doe John Doe John Doe John If you are planning on printing your book to PDF, you will need a LaTeX distribution. We recommend that you install TinyTeX (which includes XeLaTeX): https://yihui.org/tinytex/. If you are planning on printing your book to PDF, you will need a LaTeX distribution. We recommend that you install TinyTeX (which includes XeLaTeX): https://yihui.org/tinytex/. "],["stuff-still-to-include.html", "Chapter 42 Stuff still to include", " Chapter 42 Stuff still to include Regularly updating R, RStudio and all packages… great link Try to find a solution with the updateR() function in the installr package Reproducible package handling Find a solution with packrat implemented in RStudio!! good link "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
