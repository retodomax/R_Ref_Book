[
["Plots.html", "Chapter 9 Plots 9.1 Graphical parameters par() 9.2 Colors 9.3 Plot empty", " Chapter 9 Plots 9.1 Graphical parameters par() Good overviews: Official Documentation Illustrated Documentation Book R in a Nutshell: A Desktop Quick Reference 9.1.1 Set graphical parameters Change global option par(xlog = TRUE) change for local plot plot(..., xlog = TRUE) When parameters are set, their previous values are returned in an invisible named list. Such a list can be passed as an argument to par to restore the parameter values. opar &lt;- par(xlog = TRUE) plot(...) par(opar) reset default dev.off() check current parameter par(&quot;xlog&quot;) ## [1] FALSE The parameters are defined for the currently active device Normally the Rstudio plot panel If png() or pdf() opend   ⇒ only within this document dev.off() closes device and reset par() If png() or pdf()   ⇒ the same par are active as they were before the device png() or pdf() was opend If Rstudio panel   ⇒ the default par are active 9.1.2 Default Show default par() options par() ## $xlog ## [1] FALSE ## ## $ylog ## [1] FALSE ## ## $adj ## [1] 0.5 ## ## $ann ## [1] TRUE ## ## $ask ## [1] FALSE ## ## $bg ## [1] &quot;white&quot; ## ## $bty ## [1] &quot;o&quot; ## ## $cex ## [1] 1 ## ## $cex.axis ## [1] 1 ## ## $cex.lab ## [1] 1 ## ## $cex.main ## [1] 1.2 ## ## $cex.sub ## [1] 1 ## ## $cin ## [1] 0.15 0.20 ## ## $col ## [1] &quot;black&quot; ## ## $col.axis ## [1] &quot;black&quot; ## ## $col.lab ## [1] &quot;black&quot; ## ## $col.main ## [1] &quot;black&quot; ## ## $col.sub ## [1] &quot;black&quot; ## ## $cra ## [1] 28.8 38.4 ## ## $crt ## [1] 0 ## ## $csi ## [1] 0.2 ## ## $cxy ## [1] 0.02604167 0.06329115 ## ## $din ## [1] 6.999999 4.999999 ## ## $err ## [1] 0 ## ## $family ## [1] &quot;&quot; ## ## $fg ## [1] &quot;black&quot; ## ## $fig ## [1] 0 1 0 1 ## ## $fin ## [1] 6.999999 4.999999 ## ## $font ## [1] 1 ## ## $font.axis ## [1] 1 ## ## $font.lab ## [1] 1 ## ## $font.main ## [1] 2 ## ## $font.sub ## [1] 1 ## ## $lab ## [1] 5 5 7 ## ## $las ## [1] 0 ## ## $lend ## [1] &quot;round&quot; ## ## $lheight ## [1] 1 ## ## $ljoin ## [1] &quot;round&quot; ## ## $lmitre ## [1] 10 ## ## $lty ## [1] &quot;solid&quot; ## ## $lwd ## [1] 1 ## ## $mai ## [1] 1.02 0.82 0.82 0.42 ## ## $mar ## [1] 5.1 4.1 4.1 2.1 ## ## $mex ## [1] 1 ## ## $mfcol ## [1] 1 1 ## ## $mfg ## [1] 1 1 1 1 ## ## $mfrow ## [1] 1 1 ## ## $mgp ## [1] 3 1 0 ## ## $mkh ## [1] 0.001 ## ## $new ## [1] FALSE ## ## $oma ## [1] 0 0 0 0 ## ## $omd ## [1] 0 1 0 1 ## ## $omi ## [1] 0 0 0 0 ## ## $page ## [1] TRUE ## ## $pch ## [1] 1 ## ## $pin ## [1] 5.759999 3.159999 ## ## $plt ## [1] 0.1171429 0.9400000 0.2040000 0.8360000 ## ## $ps ## [1] 12 ## ## $pty ## [1] &quot;m&quot; ## ## $smo ## [1] 1 ## ## $srt ## [1] 0 ## ## $tck ## [1] NA ## ## $tcl ## [1] -0.5 ## ## $usr ## [1] 0 1 0 1 ## ## $xaxp ## [1] 0 1 5 ## ## $xaxs ## [1] &quot;r&quot; ## ## $xaxt ## [1] &quot;s&quot; ## ## $xpd ## [1] FALSE ## ## $yaxp ## [1] 0 1 5 ## ## $yaxs ## [1] &quot;r&quot; ## ## $yaxt ## [1] &quot;s&quot; ## ## $ylbias ## [1] 0.2 9.1.3 Device par(&quot;ask&quot;) # asks user before new figure is drawn ## [1] FALSE par(&quot;new&quot;) # if TRUE, plots next high-level plot above previous ## [1] FALSE 9.1.4 Device region Plot outside plotting region par(&quot;xpd&quot;) ## [1] FALSE FALSE \\(\\Rightarrow\\) clipped to the plot regions TRUE \\(\\Rightarrow\\) clipped to the figure region NA \\(\\Rightarrow\\) clipped to the device region 9.1.5 Coordinate sytem There are in total 9 coordinate sytems absolute \\((0,0)\\) in lower left device corner inches can be converted to cm with function cm() device usually in pixels (png) or points (pdf) lines based on mex (relative to font size) chars based on cex (font size) \\((0,0)\\) depend on what is plotted user user coordinates normalized ndc normalized device coordinates nic normalized inner region coordinates nfc normalized figure coordinates npc normalized plot coordinates Figure 9.1: Interval [0, 1] for different normalized coordinate systems Convert between coordinate system Use grconvertX() to convert between different coordinate systems Define lines coordinate system par(&quot;mex&quot;) # defines lines coordinate system from point size of text, &quot;height&quot; of one line (e.g. space between Line 0 and Line 1) ## [1] 1 9.1.6 Define device regions Useful links: Device regions, fig and fin, oma and mgp 9.1.6.1 Split device Several options (see here) array: par(mfrow = c(2,2)) (mfcol fills the array by columns) use par(\"mfg\") to plot a specific field in the array grid: layout(matrix()) arbitrary locations: par(fig = ...) combined with par(new=TRUE) split.screen() pairs() coplot() Example for copy paste par(mfrow = c(2, 2)) # 2-by-2 grid of plots par(oma = c(4, 4, 0, 0)) # make room (i.e. the 4&#39;s) for the overall x and y axis titles par(mar = c(2, 2, 1, 1)) # make the plots be closer together # now plot the graphs with the appropriate axes removed (via xaxt and yaxt), # remove axis labels (so that they are not redundant with overall labels, # and set some other nice choices for graphics parameters plot(runif(10), xlab = &#39;&#39;, ylab = &#39;&#39;, xaxt = &#39;n&#39;, las = 1, ylim = c(0, 1)) plot(runif(10), xlab = &#39;&#39;, ylab = &#39;&#39;, xaxt = &#39;n&#39;, yaxt = &#39;n&#39;, ylim = c(0, 1)) plot(runif(10), xlab = &#39;&#39;, ylab = &#39;&#39;, las = 1, ylim = c(0, 1)) plot(runif(10), xlab = &#39;&#39;, ylab = &#39;&#39;, yaxt = &#39;n&#39;, ylim = c(0, 1)) # print the overall labels mtext(&#39;x-axis title&#39;, side = 1, outer = TRUE, line = 2) mtext(&#39;y-axis title&#39;, side = 2, outer = TRUE, line = 2) Useful helper function FunNewPar &lt;- function(oma = c(0,0,2,2), mar = c(4,4,0,0), tcl = -0.3, mgp = c(2,0.5,0), cex.axis = 0.7, ps = 10, xpd = NA){ x &lt;- par(oma = oma, mar = mar, tcl = tcl, mgp = mgp, cex.axis = cex.axis, ps = ps, xpd = xpd) invisible(x) } Multiple plots with everything FunNewPar() Multiple plots without axis title FunNewPar(oma = c(1,1,2,2), mar = c(3,3,0,0)) Multiple plots without axis FunNewPar(oma = c(3,3,2,2), mar = c(1,1,0,0)) 9.1.6.2 Margins Define margine area using lines coordinate system par(&quot;oma&quot;) # Outer Margin Area ## [1] 0 0 0 0 par(&quot;mar&quot;) # Margine Area ## [1] 5.1 4.1 4.1 2.1 Define margine area using inches coordinate system par(&quot;omi&quot;) # Outer Margin Area ## [1] 0 0 0 0 par(&quot;mai&quot;) # Margine Area ## [1] 1.02 0.82 0.82 0.42 Define margine area using ndc/nfc coordinate system par(&quot;omd&quot;) # Start and endpoint of inner region c(x1, x2, y1, y2) ## [1] 0 1 0 1 par(&quot;fig&quot;) # Start and endpoint of figure region c(x1, x2, y1, y2) ## [1] 0 1 0 1 par(&quot;plt&quot;) # Start and endpoint of plot region c(x1, x2, y1, y2) ## [1] 0.1171429 0.9400000 0.2040000 0.8360000 Define region dimensions in inches par(&quot;fin&quot;) # Figure dimensions, (width, height) ## [1] 6.999999 4.999999 par(&quot;pin&quot;) # Plot dimensions, (width, height) ## [1] 5.759999 3.159999 9.1.6.3 Square plot par(&quot;pty&quot;) # pty = &quot;m&quot;: maximum, pty = &quot;s&quot;: square ## [1] &quot;m&quot; 9.1.7 User coordinates limits par(&quot;usr&quot;) # extremes of the user coordinate system (xmin, xmax, ymin, ymax) ## [1] 0 1 0 1 par(&quot;xaxs&quot;) # &quot;r&quot;: xlim +/- 4%, &quot;i&quot;: xlim ## [1] &quot;r&quot; 9.1.8 General appearence par(&quot;bg&quot;) # color for the background of the device region. NA =&gt; transparent ## [1] &quot;white&quot; par(&quot;fg&quot;) # color for the foreground (axes, boxes, plotting) ## [1] &quot;black&quot; 9.1.9 Symbols par(&quot;pch&quot;) # symbol ## [1] 1 par(&quot;cex&quot;) # magnifies text/symbols relative to default ## [1] 1 par(&quot;col&quot;) # symbol color ## [1] &quot;black&quot; 9.1.10 Lines par(&quot;lty&quot;) # line type ## [1] &quot;solid&quot; par(&quot;lwd&quot;) # line width ## [1] 1 par(&quot;col&quot;) # line color ## [1] &quot;black&quot; par(&quot;lend&quot;) # line end type ## [1] &quot;round&quot; par(&quot;ljoin&quot;) # line join style ## [1] &quot;round&quot; par(&quot;lmitre&quot;) # detail to ljoin option &quot;mitre&quot; ## [1] 10 9.1.11 Text par(&quot;font&quot;) # text font ## [1] 1 par(&quot;family&quot;) # text font family ## [1] &quot;&quot; par(&quot;cex&quot;) # magnifies text/symbols relative to default ## [1] 1 par(&quot;ps&quot;) # text pointsize ## [1] 12 par(&quot;col&quot;) # text color ## [1] &quot;black&quot; par(&quot;srt&quot;) # string rotation in degrees (°) ## [1] 0 par(&quot;lheight&quot;) # vertical spacing in multi-line text ## [1] 1 Point size of text = ps * cex Point size of title = ps * cex * cex.main Size of “lines” (coordinate system) = constant * cex * mex Get new text families with packet extrafont (see here) You could also use this command to get your fonts from Windows windowsFonts(MyFont = windowsFont(\"NameFromWord\")), however with this way the new font cannot be printed to PDF. 9.1.12 Axis labels par(&quot;font.lab&quot;) ## [1] 1 par(&quot;cex.lab&quot;) ## [1] 1 par(&quot;col.lab&quot;) ## [1] &quot;black&quot; par(&quot;ann&quot;) # should there be any annotations (title, axis title) ## [1] TRUE par(&quot;adj&quot;) # axis title position (0: left, 1: right) ## [1] 0.5 par(&quot;mgp&quot;) # position of 1) labels, 2) tick-mark labels, 3) tick marks (in lines) ## [1] 3 1 0 9.1.13 Axis par(&quot;font.axis&quot;) ## [1] 1 par(&quot;cex.axis&quot;) ## [1] 1 par(&quot;col.axis&quot;) ## [1] &quot;black&quot; par(&quot;xaxt&quot;) # should there be an axis (&quot;n&quot; suppresses axis) ## [1] &quot;s&quot; par(&quot;las&quot;) # orientation of tick-mark labels (0: parallel, 1: horizontal, 2: perpendicular, 3: vertical) ## [1] 0 par(&quot;mgp&quot;) # position of 1) labels, 2) tick-mark labels, 3) tick marks (in lines) ## [1] 3 1 0 9.1.14 Ticks par(&quot;mgp&quot;) # position of 1) labels, 2) tick-mark labels, 3) tick marks (in lines) ## [1] 3 1 0 par(&quot;tck&quot;) # length of tick marks (in npc), 1 =&gt; grid lines ## [1] NA par(&quot;tcl&quot;) # length of tick marks (in chars), negative =&gt; look outside plot ## [1] -0.5 par(&quot;lab&quot;) # ≈ number of ticks per axis (x-axis, y-axis, unimplementent) ## [1] 5 5 7 par(&quot;xaxp&quot;) # look where ticks are plotted (lower xlim, upper xlim, nr of ticks minus 1) ## [1] 0 1 5 par(&quot;xaxs&quot;) # &quot;r&quot;: xlim +/- 4%, &quot;i&quot;: xlim ## [1] &quot;r&quot; par(&quot;xlog&quot;) # log x axis ## [1] FALSE 9.1.15 Box par(&quot;bty&quot;) # one of &quot;o&quot;, &quot;l&quot;, &quot;7&quot;, &quot;c&quot;, &quot;u&quot;, &quot;]&quot;, no box: &quot;n&quot; ## [1] &quot;o&quot; 9.1.16 Title par(&quot;font.main&quot;) ## [1] 2 par(&quot;cex.main&quot;) ## [1] 1.2 par(&quot;col.main&quot;) ## [1] &quot;black&quot; par(&quot;font.sub&quot;) ## [1] 1 par(&quot;cex.sub&quot;) ## [1] 1 par(&quot;col.sub&quot;) ## [1] &quot;black&quot; par(&quot;ann&quot;) # should there be any annotations (title, axis title) ## [1] TRUE 9.1.17 R.O. (Read only) par(&quot;cin&quot;) # character size (width, height) in inches ## [1] 0.15 0.20 par(&quot;cra&quot;) # character size (width, height) in pixels ## [1] 28.8 38.4 par(&quot;csi&quot;) # same as par(&quot;cin&quot;)[2] ## [1] 0.2 par(&quot;cxy&quot;) # character size (width, height) in user coordinate system ## [1] 0.02604167 0.06329115 par(&quot;din&quot;) # device dimensions (width, height) in inches ## [1] 6.999999 4.999999 par(&quot;page&quot;) # A boolean value indicating whether the next call to plot.new is going to start a new page ## [1] TRUE 9.1.18 Useless par(&quot;crt&quot;) # rotate single characters, does NOT work on most devices. ## [1] 0 par(&quot;ylbias&quot;) # used in positioning of text in margin (no effect?) ## [1] 0.2 par(&quot;err&quot;) # unimplemented ## [1] 0 par(&quot;mkh&quot;) # unimplemented ## [1] 0.001 par(&quot;smo&quot;) # unimplemented ## [1] 1 9.2 Colors Very well explained here Specify by: Name example col = \"black\" possible names: colors() Hexadecimal RGB code example col = \"#000000\" =&gt; black format \"#RRGGBB\" RR, GG, BB are hexadecimal digits (00 to FF) Index example col = 1 =&gt; black index gives colors position in palette() palette() can be manipulated restore default palete with palette(\"default\") Special: index 0 is background color Default palette: 9.2.1 Functions rgb() converts RGB to hexadecimal col2rgb() converts R colors (hexadecimal, name, index) to RGB Function example col = rgb(0,0,0) =&gt; black rgb(), hsv(), hcl(), gray(), rainbow() 9.2.2 Make new palettes Create a vector of \\(n\\) continuous colors rainbow(n) heat.colors(n) terrain.colors(n) topo.colors(n) cm.colors(n) 9.2.3 Partially transparent colors Add two more digits to hexadecimal code, which define transparency #RRGGBBaa Use alpha() function of package ggplot2 require(ggplot2) plot(..., col = alpha(gray, 0.5)) 9.3 Plot empty Plot without axis/box par( ann = FALSE # no titles , bty = &quot;n&quot; # no box , xaxt = &quot;n&quot; # no x axis , yaxt = &quot;n&quot; # no y axis ) Plot empty # Perfect plot.new() # Good plot(0, type = &quot;n&quot;, axes = FALSE, ann = FALSE) "]
]
